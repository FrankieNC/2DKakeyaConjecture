import BesicovitchSet.Besicovitch
import Mathlib

set_option maxHeartbeats 300000

open Besicovitch Set Topology Metric Bornology TopologicalSpace MeasureTheory NNReal Filter

theorem P_col'_IsClosed' : IsClosed P_collection' := by
  rw [‚Üê isSeqClosed_iff_isClosed, IsSeqClosed]
  intro P‚Çô K h_mem h_lim
  have h_closed : IsClosed (K : Set (Fin 2 ‚Üí ‚Ñù)) := (K.toCompacts.isCompact).isClosed
  rw [Metric.tendsto_atTop] at h_lim
  -- simp only [Metric.NonemptyCompacts.dist_eq] at h_lim
  have hPn_bdd (n : ‚Ñï) : IsBounded (P‚Çô n : Set (Fin 2 ‚Üí ‚Ñù)) := P_collection.isBounded (h_mem n)
  have hK_bdd : IsBounded (K : Set (Fin 2 ‚Üí ‚Ñù)) := (K.toCompacts.isCompact).isBounded
  have fin_dist (n : ‚Ñï) : EMetric.hausdorffEdist (P‚Çô n) (K : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ :=
    hausdorffEdist_ne_top_of_nonempty_of_bounded (P‚Çô n).nonempty K.nonempty (hPn_bdd n) hK_bdd

  have : ‚àÄ k ‚àà K, ‚àÄ n, ‚àÉ p ‚àà P‚Çô n, dist p k ‚â§ dist K (P‚Çô n) := by
    intro k hk n
    simp only [Metric.NonemptyCompacts.dist_eq] at h_lim
    obtain ‚ü®p, hp_mem, hp_eq‚ü© := (P‚Çô n).isCompact.exists_infDist_eq_dist (P‚Çô n).nonempty k
    have hpk : dist p k = Metric.infDist k (P‚Çô n : Set _) := by
      simpa [eq_comm, dist_comm] using hp_eq
    have fin : EMetric.hausdorffEdist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô n : Set _) ‚â† ‚ä§ := by
      simpa [EMetric.hausdorffEdist_comm] using fin_dist n
    have h_le : Metric.infDist k (P‚Çô n : Set _) ‚â§ Metric.hausdorffDist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô n : Set _) := by
      apply Metric.infDist_le_hausdorffDist_of_mem (x := k) (s := (K : Set _)) (t := (P‚Çô n : Set _)) hk fin
    have h_dist : dist p k ‚â§ dist K (P‚Çô n) := by
      simpa [Metric.NonemptyCompacts.dist_eq, hpk] using h_le
    exact ‚ü®p, hp_mem, h_dist‚ü©

  choose p‚Çô hp‚Çô_mem hp‚Çô_lt using this

  -- extract_goal
  have h_tendsto : ‚àÄ (k : Fin 2 ‚Üí ‚Ñù) (hk : k ‚àà K), Tendsto (fun n ‚Ü¶ p‚Çô k hk n) atTop (ùìù k) := by
    intro k hk
    rw [NormedAddCommGroup.tendsto_atTop']
    intro Œµ hŒµ
    obtain ‚ü®N, hN‚ü© := h_lim Œµ hŒµ
    refine ‚ü®N, fun n hn ‚Ü¶ ?_‚ü©
    have h_le : dist (p‚Çô k hk n) k ‚â§ dist K (P‚Çô n) := hp‚Çô_lt k hk n
    have h_small : dist K (P‚Çô n) < Œµ := by
      simpa [dist_comm] using hN n (Nat.le_of_lt hn)
    exact lt_of_le_of_lt h_le h_small

  have h_sub : (K : Set _) ‚äÜ rectangle := by
    have hP_sub : ‚àÄ n, (P‚Çô n : Set _) ‚äÜ rectangle := by
      intro n
      rcases h_mem n with ‚ü®_, h_subset, _, _‚ü©
      exact h_subset
    have rect_closed : IsClosed rectangle := by
      rw [rectangle]
      exact isClosed_Icc

    -- Main argument
    intro k' hk'
    by_contra h_notin

    have h_pos : 0 < Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) := by
      have h_ne : Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† 0 := by
        intro h_eq
        have h_cl : k' ‚àà closure (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) := by
          rw [Metric.mem_closure_iff_infDist_zero]
          ¬∑ exact h_eq
          ¬∑ dsimp [rectangle]
            refine ‚ü®![0, 0], by simp [Pi.le_def, Fin.forall_fin_two]‚ü©
        have : k' ‚àà rectangle := by
          simpa [rect_closed.closure_eq] using h_cl
        exact h_notin this
      exact lt_of_le_of_ne Metric.infDist_nonneg h_ne.symm

    set d : ‚Ñù := Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) with hd
    have h_half_pos : 0 < d / 2 := by linarith
    obtain ‚ü®N, hN‚ü© := h_lim (d / 2) h_half_pos

    have h_haus : hausdorffDist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô N : Set _) < d / 2 := by
      have : dist (P‚Çô N) K < d / 2 := hN N (le_rfl)
      simpa [Metric.NonemptyCompacts.dist_eq, dist_comm] using this

    have h_edist_ne : EMetric.hausdorffEdist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô N : Set _) ‚â† ‚ä§ := by
      simpa [EMetric.hausdorffEdist_comm] using fin_dist N

    obtain ‚ü®y, hyP, hy_lt‚ü© := Metric.exists_dist_lt_of_hausdorffDist_lt hk' h_haus h_edist_ne

    have hy_rect : y ‚àà rectangle := (hP_sub N) hyP

    have hd_le : d ‚â§ dist k' y := by
      have h_le := Metric.infDist_le_dist_of_mem (x := k') hy_rect
      simpa [hd] using h_le

    have : dist k' y < d := by
      have : dist k' y < d / 2 := hy_lt
      exact lt_of_lt_of_le this (by linarith)
    exact (not_lt_of_ge hd_le) this

  have h_union : ‚àÉ A ‚äÜ Icc ![-1, -1] ![1, 1], K = ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by
    have h_seg_exists : ‚àÄ (k : Fin 2 ‚Üí ‚Ñù) (hk : k ‚àà (K : Set (Fin 2 ‚Üí ‚Ñù))) (n : ‚Ñï), ‚àÉ (x : Fin 2 ‚Üí ‚Ñù), x ‚àà Icc ![-1,-1] ![1,1] ‚àß p‚Çô k hk n ‚àà segment01 (x 0) (x 1) ‚àß segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
      intro k hk n
      rcases h_mem n with ‚ü®_, _, ‚ü®A, hA_sub, hA_eq‚ü©, _‚ü©
      have : p‚Çô k hk n ‚àà ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by
        rw [‚ÜêhA_eq]
        exact hp‚Çô_mem k hk n
      rcases mem_iUnion‚ÇÇ.1 this with ‚ü®p, hpA, hp_seg‚ü©
      let x : Fin 2 ‚Üí ‚Ñù := ![p 0, p 1]
      have hx : x ‚àà Icc ![-1, -1] ![1, 1] := by
        simpa [Nat.succ_eq_add_one, Nat.reduceAdd, Fin.isValue, mem_Icc, Pi.le_def, Fin.forall_fin_two, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one, x] using hA_sub hpA
      have hsub : segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
        intro y hy
        simp only [Fin.isValue, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one,
          x] at hy
        have : y ‚àà ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by
          apply mem_iUnion‚ÇÇ.2
          use p
        rwa [‚ÜêhA_eq] at this
      exact ‚ü®x, hx, hp_seg, hsub‚ü©

    choose x hx h_pn_in_seg_n h_seg_subset_n using h_seg_exists

    set A : Set (Fin 2 ‚Üí ‚Ñù) := { p | p ‚àà Icc ![-1,-1] ![1,1] ‚àß segment01 (p 0) (p 1) ‚äÜ (K : Set (Fin 2 ‚Üí ‚Ñù)) } with hA

    have hA_sub : A ‚äÜ Icc ![-1, -1] ![1, 1] := by
      rintro p ‚ü®hp_in, _‚ü©
      exact hp_in

    refine ‚ü®A, hA_sub, ?_‚ü©
    ext k
    constructor
    ¬∑ intro hk
      obtain ‚ü®x_lim, hx_lim_mem, œÜ, hœÜ, hœÜ_lim‚ü© := isCompact_Icc.tendsto_subseq (hx k hk)
      set L := segment01 (x_lim 0) (x_lim 1) with hL

      have h_seg_j_P : ‚àÄ j, segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1) ‚äÜ P‚Çô (œÜ j) := by
        intro j y hy
        apply h_seg_subset_n
        exact hy

      have h_seg_HD0 : Tendsto (fun j ‚Ü¶ hausdorffDist (segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1)) L) atTop (ùìù 0) := by
        apply tendsto_hausdorffDist_segments_of_tendsto_endpoints
        all_goals simp_all [tendsto_pi_nhds, Fin.forall_fin_two]
      observe h_L_compact : IsCompact L
      refine mem_iUnion.2 ?_
      refine ‚ü®x_lim, ?_‚ü©
      refine mem_iUnion.2 ?_
      refine ‚ü®?hxlim_in_A, ?k_in_L‚ü©
      have hLsubK : L ‚äÜ (K : Set _) := by
        intro y hyL
        set S : ‚Ñï ‚Üí Set (Fin 2 ‚Üí ‚Ñù) := fun j ‚Ü¶ segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1) with hS
        have h_exist :
            ‚àÄ j, ‚àÉ q ‚àà S j, dist q y ‚â§ hausdorffDist L (S j) := by
          intro j
          have := exists_point_on_segment01_within_HD
            (a := x_lim 0) (b := x_lim 1)
            (a' := x k hk (œÜ j) 0) (b' := x k hk (œÜ j) 1)
            (y := y) (hy := by simpa [hL] using hyL)
          rcases this with ‚ü®q, hqS, hq_le‚ü©
          exact ‚ü®q, hqS, by simpa [hL] using hq_le‚ü©

        choose q hqS hq_le using h_exist

        have hqP : ‚àÄ j, q j ‚àà (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) := by
          intro j
          exact h_seg_j_P j (hqS j)

        have hHD_LS :
            Tendsto (fun j ‚Ü¶ hausdorffDist L (S j)) atTop (ùìù 0) := by
          simpa [hausdorffDist_comm] using h_seg_HD0
        have hdist_qy :
            Tendsto (fun j ‚Ü¶ dist (q j) y) atTop (ùìù 0) := by
          refine squeeze_zero (fun _ ‚Ü¶ dist_nonneg) (fun j ‚Ü¶ hq_le j) hHD_LS

        have hq_tendsto : Tendsto q atTop (ùìù y) :=
          (tendsto_iff_dist_tendsto_zero).2 hdist_qy

        have hHD_PK_all : Tendsto (fun n ‚Ü¶ hausdorffDist (P‚Çô n : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
          have : Tendsto (fun n ‚Ü¶ dist (P‚Çô n) K) atTop (ùìù 0) := by
            refine Metric.tendsto_atTop.2 ?_
            simpa [dist_comm] using h_lim
          simpa [Metric.NonemptyCompacts.dist_eq] using this

        have hHD_PK_subseq : Tendsto (fun j ‚Ü¶ hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
          have hœÜ_tendsto : Tendsto œÜ atTop atTop := StrictMono.tendsto_atTop hœÜ
          exact hHD_PK_all.comp hœÜ_tendsto

        have hr_exists : ‚àÄ j, ‚àÉ r ‚àà (K : Set (Fin 2 ‚Üí ‚Ñù)), dist (q j) r = Metric.infDist (q j) (K : Set (Fin 2 ‚Üí ‚Ñù)) := by
          intro j
          obtain ‚ü®r, hrK, hr_eq‚ü© := (K.toCompacts.isCompact).exists_infDist_eq_dist K.nonempty (q j)
          exact ‚ü®r, hrK, by simpa [comm] using hr_eq‚ü©

        choose r hrK hr_eq using hr_exists

        have hr_le_HD : ‚àÄ j, dist (q j) (r j) ‚â§ hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set (Fin 2 ‚Üí ‚Ñù)) := by
          intro j
          have hfin : EMetric.hausdorffEdist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ := by
            simpa [EMetric.hausdorffEdist_comm] using fin_dist (œÜ j)
          have h_le : Metric.infDist (q j) (K : Set (Fin 2 ‚Üí ‚Ñù)) ‚â§ hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set (Fin 2 ‚Üí ‚Ñù)) := by
            apply Metric.infDist_le_hausdorffDist_of_mem
            ¬∑ exact h_seg_subset_n k hk (œÜ j) (hqS j)
            ¬∑ exact fin_dist (œÜ j)
          simpa [hr_eq j] using h_le

        have hdist_y_r :Tendsto (fun j ‚Ü¶ dist y (r j)) atTop (ùìù 0) := by
          have htri : ‚àÄ j, dist y (r j) ‚â§ dist y (q j) + dist (q j) (r j) := by
            intro j
            simpa [dist_comm] using dist_triangle_right y (r j) (q j)

          have hsum_to0 : Tendsto (fun j ‚Ü¶ dist (q j) y + hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
            simpa using hdist_qy.add hHD_PK_subseq

          refine squeeze_zero (fun _ ‚Ü¶ dist_nonneg) (fun j ‚Ü¶ ?_) hsum_to0
          exact (htri j).trans (add_le_add (by simp [dist_comm]) (hr_le_HD j))

        have hr_tendsto : Tendsto r atTop (ùìù y) := by
          refine tendsto_iff_dist_tendsto_zero.2 ?_
          simpa [dist_comm] using hdist_y_r

        exact h_closed.mem_of_tendsto hr_tendsto (Eventually.of_forall hrK)

      ¬∑ exact ‚ü®hx_lim_mem, by simpa [hL] using hLsubK‚ü©
      ¬∑ observe hL_compact : IsCompact L
        observe hL_closed : IsClosed L
        have h_inf_to_zero : Tendsto (fun j ‚Ü¶ infDist (p‚Çô k hk (œÜ j)) L) atTop (ùìù 0) := by
          refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds h_seg_HD0 ?lower ?upper
          ¬∑ intro i
            exact infDist_nonneg
          ¬∑ intro i
            apply infDist_le_hausdorffDist_of_mem
            ¬∑ exact h_pn_in_seg_n k hk (œÜ i)
            ¬∑ exact hausdorffEdist_ne_top_segment01 (x k hk (œÜ i) 0) (x k hk (œÜ i) 1) (x_lim 0) (x_lim 1)
        have h_inf_to_k : Tendsto (fun j ‚Ü¶ infDist (p‚Çô k hk (œÜ j)) L) atTop (ùìù (infDist k L)) := by
          have hcont : Continuous (fun x ‚Ü¶ infDist x L) := by
            simpa using (Metric.continuous_infDist_pt (s := L))
          apply (hcont.tendsto k).comp
          have : Tendsto (fun j ‚Ü¶ p‚Çô k hk (œÜ j)) atTop (ùìù k) := by
            have hœÜ_tendsto : Tendsto œÜ atTop atTop := StrictMono.tendsto_atTop hœÜ
            exact (h_tendsto k hk).comp hœÜ_tendsto
          exact this
        have h_k_zero : infDist k L = 0 := tendsto_nhds_unique h_inf_to_k h_inf_to_zero
        have hk_closure : k ‚àà closure L := by
          rw [mem_closure_iff_infDist_zero]
          ¬∑ exact h_k_zero
          ¬∑ simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)
        simpa [hL_closed.closure_eq] using hk_closure
    ¬∑ intro hk_union
      rcases mem_iUnion‚ÇÇ.1 hk_union with ‚ü®p, hpA, hk_seg‚ü©
      rw [hA] at hpA
      rcases hpA with ‚ü®_, hseg_sub‚ü©
      exact hseg_sub hk_seg

  -- PROPERTY 2

  have h_forall : ‚àÄ (v : ‚Ñù), |v| ‚â§ 1 / 2 ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ, x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ K := by
    intro v hv
    have h_exists : ‚àÄ n, ‚àÉ x : Fin 2 ‚Üí ‚Ñù, x ‚àà Icc ![-1, -1] ![1, 1] ‚àß (x 1) - (x 0) = v ‚àß segment01 (x 0) (x 1) ‚äÜ P‚Çô n := by
      intro n
      rcases h_mem n with ‚ü®_, _, _, h_prop‚ÇÇ‚ü©
      rcases h_prop‚ÇÇ v hv with ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, hdiffn, hsegPn‚ü©
      set x : Fin 2 ‚Üí ‚Ñù := ![x‚ÇÅ, x‚ÇÇ] with h
      have hx : x ‚àà Icc ![-1, -1] ![1, 1] := by
        simp_all [Fin.forall_fin_two, Pi.le_def]
      have hdiff : (x 1) - (x 0) = v := by simp [x, hdiffn]
      have hsub : segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
        intro y hy
        convert hsegPn hy
      exact ‚ü®x, hx, hdiff, hsub‚ü©

    choose! x hx hdiff h_segP using h_exists

    obtain ‚ü®x_lim, hx_lim_mem, œÜ, hœÜ, hœÜ_lim‚ü© := isCompact_Icc.tendsto_subseq hx

    have h_seg_n_P : ‚àÄ j, segment01 (x (œÜ j) 0) (x (œÜ j) 1) ‚äÜ P‚Çô (œÜ j) := by
      intro n y hy
      apply h_segP
      exact hy

    set L := segment01 (x_lim 0) (x_lim 1) with hL
    -- set L : NonemptyCompacts (Fin 2 ‚Üí ‚Ñù) := ‚ü®‚ü®segment01 (x_lim 0) (x_lim 1), segment01_isCompact _ _‚ü©, by
    --     simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)‚ü©
    --   with hL

    refine ‚ü®x_lim 0, x_lim 1, ?hx0, ?hx1, ?hdiff_lim, ?hLsubK‚ü©
    ¬∑ exact (by simp_all [Pi.le_def, Fin.forall_fin_two])
    ¬∑ exact (by simp_all [Pi.le_def, Fin.forall_fin_two])
    ¬∑ have h0 : Tendsto (fun j ‚Ü¶ (x (œÜ j)) 0) atTop (ùìù (x_lim 0)) := ((continuous_apply 0).tendsto _).comp hœÜ_lim
      have h1 : Tendsto (fun j ‚Ü¶ (x (œÜ j)) 1) atTop (ùìù (x_lim 1)) := ((continuous_apply 1).tendsto _).comp hœÜ_lim
      have hsub : Tendsto (fun j ‚Ü¶ (x (œÜ j) 1 - x (œÜ j) 0)) atTop (ùìù (x_lim 1 - x_lim 0)) := h1.sub h0
      have hconst : Tendsto (fun _ : ‚Ñï ‚Ü¶ v) atTop (ùìù v) := tendsto_const_nhds
      have : Tendsto (fun j ‚Ü¶ (x (œÜ j) 1 - x (œÜ j) 0)) atTop (ùìù v) := by simp [hdiff]
      exact tendsto_nhds_unique hsub this
    ¬∑ show L ‚äÜ K
      intro y hyL
      set S : ‚Ñï ‚Üí Set (Fin 2 ‚Üí ‚Ñù) := fun j ‚Ü¶ segment01 (x (œÜ j) 0) (x (œÜ j) 1)
      have h_exist : ‚àÄ j, ‚àÉ q ‚àà S j, dist q y ‚â§ hausdorffDist L (S j) := by
        intro j
        have := exists_point_on_segment01_within_HD
          (a := x_lim 0) (b := x_lim 1)
          (a' := x (œÜ j) 0) (b' := x (œÜ j) 1)
          (y := y) (hy := by simpa [hL] using hyL)
        rcases this with ‚ü®q, hqS, hq_le‚ü©
        exact ‚ü®q, hqS, by simpa [hL] using hq_le‚ü©
      choose q hqS hq_le using h_exist

      have hqP : ‚àÄ j, q j ‚àà (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) := by
        intro j
        exact h_seg_n_P j (hqS j)
      have h_seg_HD0 : Tendsto (fun j ‚Ü¶ hausdorffDist (segment01 (x (œÜ j) 0) (x (œÜ j) 1)) L) atTop (ùìù 0) := by
        apply tendsto_hausdorffDist_segments_of_tendsto_endpoints
        all_goals simp_all [tendsto_pi_nhds, Fin.forall_fin_two]

      have hHD_LS : Tendsto (fun j ‚Ü¶ hausdorffDist L (S j)) atTop (ùìù 0) := by
        simpa [hausdorffDist_comm] using h_seg_HD0

      have hdist_qy : Tendsto (fun j ‚Ü¶ dist (q j) y) atTop (ùìù 0) := by
        refine squeeze_zero (fun _ ‚Ü¶ dist_nonneg) (fun j ‚Ü¶ hq_le j) hHD_LS

      have hHD_PK_all : Tendsto (fun n ‚Ü¶ hausdorffDist (P‚Çô n : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
        have : Tendsto (fun n ‚Ü¶ dist (P‚Çô n) K) atTop (ùìù 0) := by
          refine Metric.tendsto_atTop.2 ?_
          simpa [dist_comm] using h_lim
        simpa [Metric.NonemptyCompacts.dist_eq] using this

      have hHD_PK_subseq : Tendsto (fun j ‚Ü¶ hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
        have hœÜ_tendsto : Tendsto œÜ atTop atTop := StrictMono.tendsto_atTop hœÜ
        exact hHD_PK_all.comp hœÜ_tendsto

      have hr_exists : ‚àÄ j, ‚àÉ r ‚àà (K : Set (Fin 2 ‚Üí ‚Ñù)), dist (q j) r = infDist (q j) (K : Set (Fin 2 ‚Üí ‚Ñù)) := by
        intro j
        obtain ‚ü®r, hrK, hr_eq‚ü© := (K.toCompacts.isCompact).exists_infDist_eq_dist K.nonempty (q j)
        exact ‚ü®r, hrK, by simpa [comm] using hr_eq‚ü©

      choose r hrK hr_eq using hr_exists

      have hr_le_HD : ‚àÄ j, dist (q j) (r j) ‚â§ hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _) := by
        intro j
        have hfin :
            EMetric.hausdorffEdist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ := by
          simpa [EMetric.hausdorffEdist_comm] using fin_dist (œÜ j)
        have h_le :=
          Metric.infDist_le_hausdorffDist_of_mem (hqP j) hfin
        simpa [hr_eq j] using h_le

      have hdist_y_r : Tendsto (fun j ‚Ü¶ dist y (r j)) atTop (ùìù 0) := by
        have htri : ‚àÄ j, dist y (r j) ‚â§ dist y (q j) + dist (q j) (r j) := by
          intro j
          simpa [dist_comm] using dist_triangle_right y (r j) (q j)

        have hsum_to0 : Tendsto (fun j ‚Ü¶ dist (q j) y + hausdorffDist (P‚Çô (œÜ j) : Set (Fin 2 ‚Üí ‚Ñù)) (K : Set _)) atTop (ùìù 0) := by
          simpa using hdist_qy.add hHD_PK_subseq

        refine squeeze_zero (fun _ ‚Ü¶ dist_nonneg) (fun j ‚Ü¶ ?_) hsum_to0
        exact (htri j).trans (add_le_add (by simp [dist_comm]) (hr_le_HD j))
      have hr_tendsto : Tendsto r atTop (ùìù y) := (tendsto_iff_dist_tendsto_zero.2 (by simpa [dist_comm] using hdist_y_r))

      exact h_closed.mem_of_tendsto hr_tendsto (Eventually.of_forall hrK)

  exact ‚ü®h_closed, h_sub, h_union, h_forall‚ü©
