/-
Copyright (c) 2025 Francesco Nishanil Chotuck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Francesco Nishanil Chotuck, Bhavik Mehta
-/

import BesicovitchSet.KakeyaSet
import Mathlib.Topology.MetricSpace.HausdorffDimension

/-!
# Kakeya in one and two dimensions

This file collects basic results and conjectural statements about Kakeya sets
in low dimensions.


## Main statements

* In one dimension, any Kakeya set has full Hausdorff dimension:
  `dimH K = 1`. (Section `Kakeya1D`.)

* We also formalise a key technical result required for the proof:
  `exists_GŒ¥_of_dimH`, which shows that any subset of `‚Ñù‚Åø` can be thickened to a
  `GŒ¥` set of the same Hausdorff dimension.

## References

TO DO
-/

open Set Topology Real NNReal MeasureTheory Measure Filter

namespace Kakeya1D

/-- Any Kakeya set in `‚Ñù` contains a closed unit‚Äêlength interval. -/
lemma kakeya_contains_unit_Icc {K : Set ‚Ñù} (hK : IsKakeya K) :
    ‚àÉ x‚ÇÄ, Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K := by
  have := hK 1 (by simp)
  rcases this with ‚ü®x‚ÇÄ, hseg‚ü©
  exact ‚ü®x‚ÇÄ, by simpa using hseg‚ü©

/-- Any closed interval of length 1 has Hausdorff dimension 1. -/
lemma dimH_Icc_length_one (a : ‚Ñù) :
    dimH (Icc a (a + 1)) = 1 := by
  have h : (interior (Icc a (a + 1))).Nonempty := by simp [interior_Icc]
  calc
    dimH (Icc a (a + 1)) = Module.finrank ‚Ñù ‚Ñù := Real.dimH_of_nonempty_interior h
    _ = 1 := by simp

/-- If a set contains some unit interval, then its `dimH ‚â• 1`. -/
lemma dimH_of_contains_Icc {K : Set ‚Ñù} {x‚ÇÄ} (h : Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K) :
    1 ‚â§ dimH K := by
  calc
    1 = dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) := (dimH_Icc_length_one x‚ÇÄ).symm
    _ ‚â§ dimH K := dimH_mono h

/-- Any subset of `‚Ñù` has `dimH ‚â§ 1`. -/
lemma dimH_le_one_univ : ‚àÄ (K : Set ‚Ñù), dimH K ‚â§ 1 := fun K ‚Ü¶ by
  calc
    dimH K ‚â§ dimH (univ : Set ‚Ñù) := dimH_mono (subset_univ _)
    _ = Module.finrank ‚Ñù ‚Ñù := by simp [dimH_univ]
    _ = 1 := by simp

/-- Any Kakeya set in `‚Ñù` has full Hausdorff dimension. -/
theorem isKakeya.dimH_eq_one (K : Set ‚Ñù) (hK : IsKakeya K) :
    dimH K = 1 := by
  rcases kakeya_contains_unit_Icc hK with ‚ü®x‚ÇÄ, hsub‚ü©
  exact le_antisymm (dimH_le_one_univ K) (dimH_of_contains_Icc hsub)

end Kakeya1D

namespace Kakeya2D

-- This result has been formalised by Bhavik Mehta in a private repository,
-- and will soon be added to Mathlib

/-- For any set `E` and any non-negative `s : ‚Ñù`, there exists a `GŒ¥` set `G` containing `E`
with the same `s`-dimensional Hausdorff measure. -/
theorem exists_GŒ¥_superset_hausdorffMeasure_eq
    {X : Type*}
    [EMetricSpace X] [MeasurableSpace X] [BorelSpace X]
    {s : ‚Ñù} (hs : 0 ‚â§ s) (E : Set X) :
    ‚àÉ G : Set X, IsGŒ¥ G ‚àß E ‚äÜ G ‚àß ŒºH[s] G = ŒºH[s] E := by
  sorry

/-- A subset of `‚Ñù‚Åø` has finite Hausdorff dimension. -/
theorem dimH_lt_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} :
    dimH A < ‚ä§ := by
  calc
    dimH A ‚â§ dimH (Set.univ : Set (Fin n ‚Üí ‚Ñù)) := dimH_mono (by simp)
    _ = n := dimH_univ_pi_fin n
    _ < ‚ä§ := by simp

theorem dimH_ne_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} : dimH A ‚â† ‚ä§ := by
  simpa using (lt_top_iff_ne_top).1 dimH_lt_top

/-- For any subset `A` of `‚Ñù‚Åø` there is a `GŒ¥`‚Äêset `G` with `A ‚äÜ G` and `dimH G = dimH A`. -/
theorem exists_GŒ¥_of_dimH {n : ‚Ñï} (A : Set (Fin n ‚Üí ‚Ñù)) :
    ‚àÉ G : Set (Fin n ‚Üí ‚Ñù), IsGŒ¥ G ‚àß A ‚äÜ G ‚àß dimH G = dimH A := by
  generalize hA : dimH A = DA
  have : DA ‚â† ‚ä§ := Ne.symm (ne_of_ne_of_eq (id (Ne.symm dimH_ne_top)) hA)
  lift DA to ‚Ñù‚â•0 using this
  obtain ‚ü®œÜ, h‚ÇÅœÜ, h‚ÇÇœÜ, h‚ÇÉœÜ‚ü© := exists_seq_strictAnti_tendsto' (show (0 : ‚Ñù‚â•0) < 1 by norm_num)
  have h‚ÇÑœÜ : Tendsto œÜ atTop (ùìù[>] 0) :=
    tendsto_nhdsWithin_mono_right (Set.range_subset_iff.2 (by simp_all)) (tendsto_nhdsWithin_range.2 h‚ÇÉœÜ)
  choose G' hG'_GŒ¥ subG' meas_eq' using
    fun k : ‚Ñï ‚Ü¶ exists_GŒ¥_superset_hausdorffMeasure_eq (coe_nonneg (DA + œÜ k)) A
  let G := ‚ãÇ k, G' k
  have iGŒ¥ : IsGŒ¥ G := IsGŒ¥.iInter fun k ‚Ü¶ hG'_GŒ¥ k
  have Asub : A ‚äÜ G := subset_iInter fun k ‚Ü¶ subG' k
  have hge : dimH A ‚â§ dimH G := dimH_mono Asub
  have hle : dimH G ‚â§ dimH A := by
    apply dimH_le
    intro d' hd'
    by_contra! hgt
    have hd_pos : 0 < (d' : ‚Ñù‚â•0) - DA := by aesop
    rw [Metric.tendsto_atTop] at h‚ÇÉœÜ
    rcases h‚ÇÉœÜ _ hd_pos with ‚ü®k, hœÜk_lt‚ü©
    generalize hD : DA + œÜ k = D
    specialize h‚ÇÇœÜ k
    simp only [mem_Ioo] at h‚ÇÇœÜ
    cases' h‚ÇÇœÜ with hœÜk_gt_0 hœÜk_lt_1
    have hlt : DA < D := by
      linear_combination hD + hœÜk_gt_0
    have hŒºA : ŒºH[D] A = 0 := by
      apply hausdorffMeasure_of_dimH_lt
      rw [hA]
      norm_cast
    have hŒºGk : ŒºH[D] (G' k) = 0 := by
      rw [‚Üê hD, meas_eq', hD, hŒºA]
    have hmono : ŒºH[d'] G ‚â§ ŒºH[D] (G' k) := by
      calc
        ŒºH[d'] G ‚â§ ŒºH[d'] (G' k) := by
          apply measure_mono
          exact iInter_subset_of_subset k fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
        _ ‚â§ ŒºH[D] (G' k) := by
          apply hausdorffMeasure_mono
          apply le_of_lt
          rw [‚Üê hD]
          simp only [NNReal.coe_add]
          specialize hœÜk_lt k
          norm_cast
          simp only [ge_iff_le, le_refl, val_eq_coe, dist_lt_coe, nndist_zero_eq_val',
            forall_const] at hœÜk_lt
          rw [lt_tsub_iff_left] at hœÜk_lt
          exact hœÜk_lt
    have h0 : ŒºH[d'] G = 0 := by
      have hbot : ŒºH[d'] G ‚â§ 0 := by
        apply hmono.trans_eq
        exact hŒºGk
      exact le_bot_iff.1 hbot
    simp [h0] at hd'
  rw [‚Üê hA]
  exact ‚ü®G, iGŒ¥, Asub, le_antisymm hle hge‚ü©

/-- If `A ‚äÜ ‚Ñù‚Åø` has finite `s`-dimensional Hausdorff measure,
    then for any `k ‚â§ s` and any `k`-plane `W`, the slices
    `A ‚à© (W·óÆ + x)` have finite `(s - k)`-measure for `ŒºH[k]`-almost all `x ‚àà W`. -/
theorem hausdorffMeasure_slicing
  (n : ‚Ñï)
  (A : Set (EuclideanSpace ‚Ñù (Fin n))) (hA : MeasurableSet A)
  (s : ‚Ñù) (hs : ŒºH[s] A < ‚ä§)
  (k : ‚Ñï) (hks : (k : ‚Ñù) ‚â§ s)
  (W : Submodule ‚Ñù (EuclideanSpace ‚Ñù (Fin n))) (hW : Module.finrank ‚Ñù W = k)
  (direction : W) (x : W) :
  ‚àÄ·µê x ‚àÇ (ŒºH[(k : ‚Ñù)]).restrict (W : Set (EuclideanSpace ‚Ñù (Fin n))),
    ŒºH[s - k] (A ‚à© (AffineSubspace.mk' x W.orthogonal : Set _)) < ‚ä§ := by
  sorry

end Kakeya2D
