/-
Copyright (c) 2025 Yes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Francesco Nishanil Chotuck, Yuming Guo, Bhavik Mehta
-/

import Mathlib

namespace Besicovitch

open Set Real Topology Metric Bornology TopologicalSpace MeasureTheory

-- Formalise the entirety of Section 2. Section 4 is nonsense

section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

-- @FrankieNC: you should add the stuff you proved about this from CW3 to this section
/-- A subset of a normed real vector space `E` is Kakeya if it contains a segment of unit length in
every direction. -/
def IsKakeya (s : Set E) : Prop :=
    ‚àÄ v : E, ‚Äñv‚Äñ = 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s

/-- The universal set is Kakeya. -/
lemma univ_isKakeya : IsKakeya (Set.univ : Set E) := by
  simp [IsKakeya]

/-- If `s` is Kakeya and `s ‚äÜ t`, then `t` is Kakeya. -/
theorem IsKakeya.subset {s t : Set E} (h : IsKakeya s) (hs : s ‚äÜ t) : IsKakeya t := by
  intro v hv
  rcases h v hv with ‚ü®x, hx‚ü©
  exact ‚ü®x, hx.trans hs‚ü©
  -- exact Exists.intro x fun ‚¶Éa‚¶Ñ a_1 ‚Ü¶ hs (hx a_1)

/-- The closed unit ball is Kakeya. -/
theorem IsKakeya.ball : IsKakeya (closedBall (0 : E) 1) := by
  intro v hv
  use -v
  intro y hy
  calc
    dist y 0 = ‚Äñy - 0‚Äñ := by aesop
    _ ‚â§ ‚Äñ(-v) - 0‚Äñ := by
      apply norm_sub_le_of_mem_segment
      simp only [neg_add_cancel] at hy
      rw [segment_symm]
      exact hy
    _ = ‚Äñv‚Äñ := by simp [norm_neg]
    _ = 1 := hv

/-- In a nontrivial normed space, any Kakeya set is nonempty. -/
theorem IsKakeya.nonempty [Nontrivial E] {s : Set E} (h : IsKakeya s) : s.Nonempty := by
  rcases exists_pair_ne E with ‚ü®a, b, hab‚ü©
  set x := a - b with hx
  have hx : x ‚â† 0 := by
    intro h‚ÇÄ; apply hab
    simpa [hx] using sub_eq_zero.1 h‚ÇÄ
  have hpos : 0 < ‚Äñx‚Äñ := norm_pos_iff.mpr hx
  set v := ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x with hv
  have hv_norm : ‚Äñv‚Äñ = 1 := by
    rw [hv]
    simp only [norm_smul, norm_inv, norm_norm]
    aesop -- @b-mehta I am doing this at ungodly hours and I am too lazy to not use `aesop`
  rcases h v hv_norm with ‚ü®y, hy‚ü©
  use y
  exact hy (left_mem_segment ‚Ñù y (y + v))

/--
A reformulation of the Kakeya condition: it suffices to check the existence of
a segment for all vectors with norm at most 1, rather than exactly 1.
-/
theorem isKakeya_iff_sub_unit [Nontrivial E] {s : Set E} :
    IsKakeya s ‚Üî ‚àÄ v : E, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s := by
  constructor
  -- First, prove: IsKakeya s ‚Üí ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x, segment x x+v ‚äÜ s
  ¬∑ intro h_kakeya v hv
    -- rw [IsKakeya] at h_kakeya

    -- Case: v = 0
    by_cases h‚ÇÄ : v = 0
    ¬∑ rw [h‚ÇÄ]
      simp only [add_zero, segment_same, Set.singleton_subset_iff]
      exact h_kakeya.nonempty

    -- Case: v ‚â† 0
    ¬∑ set u := ‚Äñv‚Äñ‚Åª¬π ‚Ä¢ v with hu -- rescale v to a unit vector u
      have h‚ÇÅ : ‚Äñv‚Äñ ‚â† 0 := by
        contrapose! h‚ÇÄ
        rw [norm_eq_zero] at h‚ÇÄ
        exact h‚ÇÄ
      -- Now u has norm 1
      have h‚ÇÇ : ‚Äñu‚Äñ = 1 := by
        rw [hu]
        rw [norm_smul, norm_inv, norm_norm]
        field_simp
      -- By IsKakeya, s contains segment in direction u
      obtain ‚ü®x, hx‚ü© := h_kakeya u h‚ÇÇ
      use x

      -- We want to show: segment x x+v ‚äÜ segment x x+u
      -- Since v is a scalar multiple of u, both segments lie along same ray
      have h‚ÇÉ : segment ‚Ñù x (x + v) ‚äÜ segment ‚Ñù x (x + u) := by
        apply Convex.segment_subset
        ¬∑ exact convex_segment _ _
        ¬∑ exact left_mem_segment _ _ _
        ¬∑ rw [segment_eq_image']
          refine ‚ü®‚Äñv‚Äñ, ‚ü®by simp, hv‚ü©, ?_‚ü©
          simp [hu]
          rw [smul_smul, mul_inv_cancel‚ÇÄ, one_smul]
          exact h‚ÇÅ
      -- Apply inclusion of segments to conclude result
      exact fun ‚¶Éa‚¶Ñ a_1 ‚Ü¶ hx (h‚ÇÉ a_1)
  -- Converse: ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ... ‚áí IsKakeya s
  ¬∑ intro h_segment v hv
    specialize h_segment v
    apply h_segment
    exact le_of_eq hv

/--
A Besicovitch set in `‚Ñù‚Åø` is a Kakeya set of Lebesgue measure zero.
-/
def IsBesicovitch {n : ‚Ñï} (s : Set (Fin n ‚Üí ‚Ñù)) : Prop := IsKakeya s ‚àß volume s = 0

end

section

/-- The rectangle [-1,1] √ó [0,1] -/
def rectangle : Set (‚Ñù √ó ‚Ñù) := Icc (-1) 1 √óÀ¢ Icc 0 1

/-- The segment from (x‚ÇÅ, 0) to (x‚ÇÇ, 1). -/
def segment01 (x‚ÇÅ x‚ÇÇ : ‚Ñù) : Set (‚Ñù √ó ‚Ñù) :=
  segment ‚Ñù (x‚ÇÅ, 0) (x‚ÇÇ, 1)

-- Collection ùí´ of subsets P ‚äÜ [-1,1] √ó [0,1] satisfying (i) and (ii)
def P_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
  { P | IsClosed P ‚àß P ‚äÜ rectangle ‚àß
    -- (i) P is a union of line segments from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
    (‚àÉ A : Set (‚Ñù √ó ‚Ñù), A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 ‚àß
      P = ‚ãÉ (p ‚àà A), segment01 p.1 p.2) ‚àß
    -- (ii) for all v with |v| ‚â§ 1/2, there exists x‚ÇÅ, x‚ÇÇ ‚àà [-1,1] with x‚ÇÇ - x‚ÇÅ = v and segment ‚äÜ P
    (‚àÄ v : ‚Ñù, |v| ‚â§ 1/2 ‚Üí ‚àÉ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1
        ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

-- Define ùí¶ as the collection of non-empty compact subsets of ‚Ñù¬≤
def P_collection' : Set (NonemptyCompacts (‚Ñù √ó ‚Ñù)) :=
  { P | IsClosed (P : Set (‚Ñù √ó ‚Ñù)) ‚àß (P : Set (‚Ñù √ó ‚Ñù)) ‚äÜ rectangle ‚àß
    -- (i) P is a union of line segments from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
    (‚àÉ A : Set (‚Ñù √ó ‚Ñù), A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 ‚àß
      P = ‚ãÉ (p ‚àà A), segment01 p.1 p.2) ‚àß
    -- (ii) for all v with |v| ‚â§ 1/2, there exists x‚ÇÅ, x‚ÇÇ ‚àà [-1,1] with x‚ÇÇ - x‚ÇÅ = v and segment ‚äÜ P
    (‚àÄ v : ‚Ñù, |v| ‚â§ 1/2 ‚Üí ‚àÉ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1
        ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

/-- The carrier image of `P_collection'` recovers the original set-level collection `P_collection`. -/
theorem P_collection'_image_eq : (‚Üë) '' P_collection' = P_collection := by
  ext P
  constructor
  ¬∑ rintro ‚ü®Q, hQ, rfl‚ü©
    exact hQ
  ¬∑ intro hP
    have h_compact : IsCompact P := by
      rw [isCompact_iff_isClosed_bounded]
      obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
      constructor
      ¬∑ exact h‚ÇÅ
      ¬∑ rw [isBounded_iff]
        use 10
        intro x hx y hy
        have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
        have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
        have hx_bound : |x.1 - y.1| ‚â§ 2 := by
          calc
            |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
            _ ‚â§ 1 + 1 := by
              have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
              have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
              (expose_names; exact add_le_add this_1 this)
            _ = 2 := by norm_num
        have hy_bound : |x.2 - y.2| ‚â§ 2 := by
          calc
            |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
            _ ‚â§ 1 + 1 := by
              apply add_le_add
              ¬∑ apply abs_le.2
                constructor -- From here on it is all Yuming
                ¬∑ have : 0 ‚â§ x.2 := by aesop
                  have : (-1 : ‚Ñù) ‚â§ 0 := by norm_num
                  expose_names; exact le_trans this this_1
                ¬∑ aesop
              ¬∑ apply abs_le.2
                constructor
                ¬∑ have : 0 ‚â§ y.2 := by aesop
                  have : (-1 : ‚Ñù) ‚â§ 0 := by norm_num
                  expose_names; exact le_trans this this_1
                ¬∑ aesop
            _ = 2 := by norm_num
        calc
          dist x y = ‚Äñx - y‚Äñ := rfl
          _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
          _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
          _ ‚â§ 10 := by norm_num
    have h_nonempty : P.Nonempty := by
      have h_seg_exists : ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P := by
        obtain ‚ü®_, _, _, h‚ü© := hP
        specialize h 0 (by norm_num)
        obtain ‚ü®x‚ÇÅ, x‚ÇÇ, h‚ÇÅ, _, h‚ÇÇ‚ü© := h
        have : x‚ÇÅ = x‚ÇÇ := by linarith [h‚ÇÇ]
        subst this
        obtain ‚ü®_, h‚ÇÇ‚ü© := h‚ÇÇ
        exact ‚ü®x‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©
      rcases h_seg_exists with ‚ü®x, hx, h_seg‚ü©
      use (x, 0)
      exact h_seg (left_mem_segment ‚Ñù (x, 0) (x, 1))
    simp only [mem_image]
    let Q : NonemptyCompacts (‚Ñù √ó ‚Ñù) := ‚ü®‚ü®P, h_compact‚ü©, h_nonempty‚ü©
    use Q
    exact ‚ü®hP, rfl‚ü©

-- -- Define ùí¶ as the collection of non-empty compact subsets of ‚Ñù¬≤
-- def K_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
--   { K | K.Nonempty ‚àß IsCompact K }

-- lemma P_isNonempty {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
--     ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P := by
--   -- BM: I broke this because I changed P_collection to be more correct
--   obtain ‚ü®_, _, _, h‚ü© := hP
--   specialize h 0 (by norm_num)
--   obtain ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, h_diff, h_seg‚ü© := h
--   have : x‚ÇÅ = x‚ÇÇ := by linarith [h_diff]
--   subst this
--   exact ‚ü®x‚ÇÅ, hx‚ÇÅ, h_seg‚ü©
  -- exact Filter.frequently_principal.mp fun a ‚Ü¶ a hx‚ÇÅ h_seg

-- lemma exists_mem_P {P : Set (‚Ñù √ó ‚Ñù)}
--   (h : ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P) :
--     ‚àÉ p, p ‚àà P := by
--   rcases h with ‚ü®x, hx, hseg‚ü©
--   have h_left : (x, 0) ‚àà segment01 x x := by
--     dsimp [segment01]
--     exact left_mem_segment ‚Ñù (x, 0) (x, 1)
--   exact ‚ü®(x, 0), hseg h_left‚ü©

-- BM: I'd phrase this as P_collection ‚äÜ K_collection
-- lemma P_collection_in_K_collection {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
--     P ‚àà K_collection := by
--   -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--   have h_nonempty : P.Nonempty := by
--     rcases P_isNonempty hP with ‚ü®x, hx, hseg‚ü©
--     refine ‚ü®(x, 0), hseg (left_mem_segment ‚Ñù (x, 0) (x, 1))‚ü©
--   have h_compact : IsCompact P := by
--     rw [isCompact_iff_isClosed_bounded]
--     -- BM: I broke this because I changed P_collection to be more correct
--     obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
--     -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--     constructor
--     ¬∑ exact h‚ÇÅ
--     ¬∑ rw [isBounded_iff]
--       use 10
--       intro x hx y hy
--       have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
--       have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
--       have hx_bound : |x.1 - y.1| ‚â§ 2 := by
--         calc
--           |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
--           _ ‚â§ 1 + 1 := by
--             have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
--             have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
--             (expose_names; exact add_le_add this_1 this)
--           _ = 2 := by norm_num
--       have hy_bound : |x.2 - y.2| ‚â§ 2 := by
--         calc
--           |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
--           _ ‚â§ 1 + 1 := by
--             exact add_le_add
--               (abs_le.2 ‚ü®by linarith [hfx2.1], hfx2.2‚ü©)
--               (abs_le.2 ‚ü®by linarith [hfy2.1], hfy2.2‚ü©)
--           _ = 2 := by norm_num
--       calc
--         dist x y = ‚Äñx - y‚Äñ := rfl
--         _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
--         _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
--         _ ‚â§ 10 := by norm_num
--   rw [K_collection]
--   exact mem_sep h_nonempty h_compact

-- lemma P_collection_sub_K_collection :
--     P_collection ‚äÜ K_collection := by
--   intro P hP
--   -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--   have h_nonempty : P.Nonempty := by
--     rcases P_isNonempty hP with ‚ü®x, hx, hseg‚ü©
--     refine ‚ü®(x, 0), hseg (left_mem_segment ‚Ñù (x, 0) (x, 1))‚ü©
--   have h_compact : IsCompact P := by
--     rw [isCompact_iff_isClosed_bounded]
--     -- BM: I broke this because I changed P_collection to be more correct
--     obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
--     -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--     constructor
--     ¬∑ exact h‚ÇÅ
--     ¬∑ rw [isBounded_iff]
--       use 10
--       intro x hx y hy
--       have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
--       have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
--       have hx_bound : |x.1 - y.1| ‚â§ 2 := by
--         calc
--           |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
--           _ ‚â§ 1 + 1 := by
--             have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
--             have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
--             (expose_names; exact add_le_add this_1 this)
--           _ = 2 := by norm_num
--       have hy_bound : |x.2 - y.2| ‚â§ 2 := by
--         calc
--           |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
--           _ ‚â§ 1 + 1 := by
--             exact add_le_add
--               (abs_le.2 ‚ü®by linarith [hfx2.1], hfx2.2‚ü©)
--               (abs_le.2 ‚ü®by linarith [hfy2.1], hfy2.2‚ü©)
--           _ = 2 := by norm_num
--       calc
--         dist x y = ‚Äñx - y‚Äñ := rfl
--         _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
--         _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
--         _ ‚â§ 10 := by norm_num
--   exact mem_sep h_nonempty h_compact

open Filter

theorem ùìü_IsClosed : IsClosed P_collection' := by
  rw [‚Üê isSeqClosed_iff_isClosed, IsSeqClosed]
  intro K‚Çô K h_mem h_lim
  let F : ‚Ñï ‚Üí Set (‚Ñù √ó ‚Ñù) := fun n ‚Ü¶ (K‚Çô n : Set (‚Ñù √ó ‚Ñù))
  have hcoe : Continuous fun (P : NonemptyCompacts (‚Ñù √ó ‚Ñù)) ‚Ü¶ (P : Set (‚Ñù √ó ‚Ñù)) := by
    sorry
    -- continuity
  have tendstoF : Tendsto F atTop (ùìù (K : Set (‚Ñù √ó ‚Ñù))) :=
    (hcoe.tendsto K).comp h_lim
  have h_closed : IsClosed (K : Set (‚Ñù √ó ‚Ñù)) := by
    exact (K.toCompacts.isCompact).isClosed
  have h_union : ‚àÉ A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1, ‚ÜëK = ‚ãÉ p ‚àà A, segment01 p.1 p.2 := by
    let A : Set (‚Ñù √ó ‚Ñù) :=
    { p | p.1 ‚àà Icc (-1 : ‚Ñù) 1
         ‚àß p.2 ‚àà Icc (-1 : ‚Ñù) 1
         ‚àß segment01 p.1 p.2 ‚äÜ (K : _) }
    use A
    have hA : A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 := by
      simp only [Icc_prod_Icc, subset_def, and_assoc]
      intro a ha
      aesop
    refine ‚ü®hA, ext fun x ‚Ü¶ by
      constructor
      ¬∑ intro hxK
        sorry
      ¬∑ sorry
        ‚ü©
  have h_forall : ‚àÄ (v : ‚Ñù), |v| ‚â§ 1 / 2 ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ,
      x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ ‚ÜëK := by
    sorry
  have h_rect_closed : IsClosed rectangle :=
    isClosed_Icc.prod isClosed_Icc
  have h_sub : (K : Set _) ‚äÜ rectangle := by
    have h_in : ‚àÄ n, F n ‚àà {t | t ‚äÜ rectangle} := fun n ‚Ü¶ (h_mem n).2.1
    sorry
  dsimp [P_collection'] at *
  exact ‚ü®h_closed, h_sub, h_union, h_forall‚ü©

-- Lemma 2.4 goes here

/-- The subfamily of our Kakeya‚Äêtype compact sets which happen to have Lebesgue measure zero. -/
def zero_measure_compacts : Set (NonemptyCompacts (‚Ñù √ó ‚Ñù)) :=
  { P ‚àà P_collection' | volume (P : Set (‚Ñù √ó ‚Ñù)) = 0 }

/-- Theorem 2.3.  The collection of those `P` of Lebesgue‚Äêmeasure zero is of second
    category (i.e. non‚Äêmeagre) in the Hausdorff‚Äêmetric space of all `P`. -/
theorem zero_measure_compacts_second_category :
    ¬¨ IsMeagre (zero_measure_compacts : Set (NonemptyCompacts (‚Ñù √ó ‚Ñù))) := by
  sorry

-- I wrote the statement down but I am not conviced myself
theorem exists_besicovitch_set : ‚àÉ s : Set (Fin 2 ‚Üí ‚Ñù), IsBesicovitch s := by
  sorry
  -- pick any zero‚Äêmeasure Kakeya compact P‚ÇÄ

end

end Besicovitch
