/-
Copyright (c) 2025 Yes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Francesco Nishanil Chotuck, Yuming Guo, Bhavik Mehta
-/

import Mathlib

namespace Besicovitch

open Set Real Topology Metric Bornology

-- Formalise the entirity of Section 2. Section 4 is nonsense

def IsKakeya {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] (s : Set E) : Prop :=
    ‚àÄ v : E, ‚Äñv‚Äñ = 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s

def IsBesicovitch {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {n : ‚Ñï} (s : Set (Fin n ‚Üí ‚Ñù)) : Prop :=
    IsKakeya s ‚àß MeasureTheory.volume s = 0

-- The rectangle [-1,1] √ó [0,1]
def rectangle : Set (‚Ñù √ó ‚Ñù) :=
  { p | p.1 ‚àà Icc (-1 : ‚Ñù) 1 ‚àß p.2 ‚àà Icc 0 1 }

-- Segment from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
def segment01 (x‚ÇÅ x‚ÇÇ : ‚Ñù) : Set (‚Ñù √ó ‚Ñù) :=
  segment ‚Ñù (x‚ÇÅ, 0) (x‚ÇÇ, 1)

-- Collection ùí´ of subsets P ‚äÜ [-1,1] √ó [0,1] satisfying (i) and (ii)
def P_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
  { P | IsClosed P ‚àß P ‚äÜ rectangle ‚àß
    -- (i) P is a union of line segments from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
    ‚àÉ A : Set (‚Ñù √ó ‚Ñù), A ‚äÜ Icc (-1 : ‚Ñù) 1 √óÀ¢ Icc (-1 : ‚Ñù) 1 ‚àß
      P = ‚ãÉ (p ‚àà A), segment01 p.1 p.2 ‚àß
    -- P = ‚ãÉ (x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1) (x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1), segment01 x‚ÇÅ x‚ÇÇ ‚àß
    -- (‚àÄ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1) 1 ‚Üí x‚ÇÇ ‚àà Icc (-1) 1 ‚Üí
      -- segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P ‚à® segment01 x‚ÇÅ x‚ÇÇ ‚à© P = ‚àÖ) ‚àß
    -- (ii) for all v with |v| ‚â§ 1/2, there exists x‚ÇÅ, x‚ÇÇ ‚àà [-1,1] with x‚ÇÇ - x‚ÇÅ = v and segment ‚äÜ P
    (‚àÄ v : ‚Ñù, |v| ‚â§ 1/2 ‚Üí ‚àÉ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1
        ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

-- Define ùí¶ as the collection of non-empty compact subsets of ‚Ñù¬≤
def K_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
  { K | K.Nonempty ‚àß IsCompact K }

lemma P_isNonempty {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
    ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P := by
  obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
  specialize h‚ÇÖb 0 (by norm_num)
  obtain ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, h_diff, h_seg‚ü© := h‚ÇÖb
  have : x‚ÇÅ = x‚ÇÇ := by linarith [h_diff]
  subst this
  exact ‚ü®x‚ÇÅ, hx‚ÇÅ, h_seg‚ü©
  -- exact Filter.frequently_principal.mp fun a ‚Ü¶ a hx‚ÇÅ h_seg

-- lemma exists_mem_P {P : Set (‚Ñù √ó ‚Ñù)}
--   (h : ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P) :
--     ‚àÉ p, p ‚àà P := by
--   rcases h with ‚ü®x, hx, hseg‚ü©
--   have h_left : (x, 0) ‚àà segment01 x x := by
--     dsimp [segment01]
--     exact left_mem_segment ‚Ñù (x, 0) (x, 1)
--   exact ‚ü®(x, 0), hseg h_left‚ü©

lemma P_collection_in_K_collection {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
    P ‚àà K_collection := by
  -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
  have h_nonempty : P.Nonempty := by
    rcases P_isNonempty hP with ‚ü®x, hx, hseg‚ü©
    refine ‚ü®(x, 0), hseg (left_mem_segment ‚Ñù (x, 0) (x, 1))‚ü©
  have h_compact : IsCompact P := by
    rw [isCompact_iff_isClosed_bounded]
    obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
    constructor
    ¬∑ exact h‚ÇÅ
    ¬∑ rw [isBounded_iff]
      use 10
      intro x hx y hy
      have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
      have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
      have hx_bound : |x.1 - y.1| ‚â§ 2 := by
        calc
          |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
          _ ‚â§ 1 + 1 := by
            have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
            have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
            (expose_names; exact add_le_add this_1 this)
          _ = 2 := by norm_num
      have hy_bound : |x.2 - y.2| ‚â§ 2 := by
        calc
          |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
          _ ‚â§ 1 + 1 := by
            exact add_le_add
              (abs_le.2 ‚ü®by linarith [hfx2.1], hfx2.2‚ü©)
              (abs_le.2 ‚ü®by linarith [hfy2.1], hfy2.2‚ü©)
          _ = 2 := by norm_num
      calc
        dist x y = ‚Äñx - y‚Äñ := rfl
        _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
        _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
        _ ‚â§ 10 := by norm_num
  rw [K_collection]
  exact mem_sep h_nonempty h_compact

open Filter

/--
If `P n ‚àà P_collection` for all `n` and `hausdorffDist (P n) K ‚Üí 0`, then `K` satisfies
property (i): for every `k ‚àà K` there are `x‚ÇÅ,x‚ÇÇ ‚àà [-1,1]` with
`segment01 x‚ÇÅ x‚ÇÇ ‚äÜ K` and `k ‚àà segment01 x‚ÇÅ x‚ÇÇ`.
-/
lemma P_collection.hausdorff_limit_property_i
  {P : ‚Ñï ‚Üí Set (‚Ñù √ó ‚Ñù)} {K : Set (‚Ñù √ó ‚Ñù)}
  (hP : ‚àÄ n, P n ‚àà P_collection)
  (hKlim : Tendsto (fun n ‚Ü¶ hausdorffDist (P n) K) atTop (ùìù 0)) :
  ‚àÄ k ‚àà K, ‚àÉ x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1, ‚àÉ x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1,
    segment01 x‚ÇÅ x‚ÇÇ ‚äÜ K ‚àß k ‚àà segment01 x‚ÇÅ x‚ÇÇ := by
  intro k hk
  -- By compactness of Icc(-1,1)√óIcc(-1,1) extract a convergent subsequence
  have h_compact_sq : IsCompact (Icc (-1 : ‚Ñù) 1 √óÀ¢ Icc (-1 : ‚Ñù) 1) :=  by
    refine IsCompact.prod ?_ ?_
    ¬∑ exact isCompact_Icc
    ¬∑ exact isCompact_Icc
  sorry

end Besicovitch
