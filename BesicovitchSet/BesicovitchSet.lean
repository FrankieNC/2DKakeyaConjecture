/-
Copyright (c) 2025 Yes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Francesco Nishanil Chotuck, Yuming Guo, Bhavik Mehta
-/

import Mathlib

namespace Besicovitch

open Set Real Topology Metric Bornology TopologicalSpace MeasureTheory MetricSpace

-- Formalise the entirety of Section 2. Section 4 is nonsense

section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-- A subset of a normed real vector space `E` is Kakeya if it contains a segment of unit length in
every direction. -/
def IsKakeya {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] (s : Set E) : Prop :=
    ‚àÄ v : E, ‚Äñv‚Äñ = 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s

/-- The universal set is Kakeya. -/
lemma univ_isKakeya : IsKakeya (Set.univ : Set E) := by simp [IsKakeya]

/-- If `s` is Kakeya and `s ‚äÜ t`, then `t` is Kakeya. -/
theorem IsKakeya_subset {s t : Set E} (h : IsKakeya s) (hs : s ‚äÜ t) : IsKakeya t := by
  intro v hv
  rcases h v hv with ‚ü®x, hx‚ü©
  exact ‚ü®x, hx.trans hs‚ü©

/-- The closed unit ball is Kakeya. -/
theorem IsKakeya_ball : IsKakeya (closedBall (0 : E) 1) := by
  intro v hv
  use -v
  intro y hy
  calc
    dist y 0 = ‚Äñy - 0‚Äñ := by simp
    _ ‚â§ ‚Äñ(-v) - 0‚Äñ := by
      apply norm_sub_le_of_mem_segment
      simp only [neg_add_cancel] at hy
      rw [segment_symm]
      exact hy
    _ = ‚Äñv‚Äñ := by simp
    _ = 1 := hv

/-- In a nontrivial normed space, any Kakeya set is nonempty. -/
theorem IsKakeya.nonempty [Nontrivial E] {s : Set E} (h : IsKakeya s) : s.Nonempty := by
  obtain ‚ü®v, hv_norm‚ü© := exists_norm_eq E zero_le_one
  rcases h v hv_norm with ‚ü®y, hy‚ü©
  exact ‚ü®y, hy (left_mem_segment ..)‚ü©

/--
A reformulation of the Kakeya condition: it suffices to check the existence of
a segment for all vectors with norm at most 1, rather than exactly 1.
-/
theorem isKakeya_iff_sub_unit [Nontrivial E] {s : Set E} :
    IsKakeya s ‚Üî ‚àÄ v : E, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s := by
  constructor
  -- First, prove: IsKakeya s ‚Üí ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x, segment x x+v ‚äÜ s
  ¬∑ intro h_kakeya v hv
    -- Case: v = 0
    by_cases h‚ÇÄ : v = 0
    ¬∑ simpa [h‚ÇÄ] using h_kakeya.nonempty
    -- Case: v ‚â† 0
    ¬∑ set u := ‚Äñv‚Äñ‚Åª¬π ‚Ä¢ v with hu -- rescale v to a unit vector u
      have h‚ÇÅ : ‚Äñv‚Äñ ‚â† 0 := by
        contrapose! h‚ÇÄ
        rw [norm_eq_zero] at h‚ÇÄ
        exact h‚ÇÄ
      -- Now u has norm 1
      have h‚ÇÇ : ‚Äñu‚Äñ = 1 := by field_simp [hu, norm_smul]
      -- By IsKakeya, s contains segment in direction u
      obtain ‚ü®x, hx‚ü© := h_kakeya u h‚ÇÇ
      use x
      -- We want to show: segment x x+v ‚äÜ segment x x+u
      -- Since v is a scalar multiple of u, both segments lie along same ray
      have h‚ÇÉ : segment ‚Ñù x (x + v) ‚äÜ segment ‚Ñù x (x + u) := by
        apply (convex_segment _ _).segment_subset (left_mem_segment _ _ _)
        rw [segment_eq_image']
        exact ‚ü®‚Äñv‚Äñ, by simp [*]‚ü©
      -- Apply inclusion of segments to conclude result
      exact h‚ÇÉ.trans hx
  -- Converse: ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ... ‚áí IsKakeya s
  ¬∑ intro h_segment v hv
    exact h_segment v hv.le

/--
A Besicovitch set in `‚Ñù‚Åø` is a Kakeya set of Lebesgue measure zero.
-/
def IsBesicovitch {n : ‚Ñï} (s : Set (Fin n ‚Üí ‚Ñù)) : Prop := IsKakeya s ‚àß volume s = 0

end

section

def rectangle : Set (Fin 2 ‚Üí ‚Ñù) := Icc ![-1, 0] ![1,1]

lemma rectangle_IsBounded : IsBounded rectangle := by simp_rw [rectangle, isBounded_Icc]

lemma rectangle_convex : Convex ‚Ñù rectangle := by simp_rw [rectangle, convex_Icc]

def segment01 (x‚ÇÅ x‚ÇÇ : ‚Ñù) : Set (Fin 2 ‚Üí ‚Ñù) :=
  segment ‚Ñù ![x‚ÇÅ, 0] ![x‚ÇÇ, 1]

lemma segment01_eq (x‚ÇÄ x‚ÇÅ : ‚Ñù) : segment01 x‚ÇÄ x‚ÇÅ = segment ‚Ñù ![x‚ÇÄ,0] ![x‚ÇÅ,1] := rfl

/-- The collection ùí´ of subsets `P ‚äÜ rectangle` satisfying
    (i) ‚Äúunion of those segments‚Äô‚Äô and (ii) the spanning condition. -/
def P_collection : Set (Set (Fin 2 ‚Üí ‚Ñù)) :=
  { P | IsClosed P ‚àß P ‚äÜ rectangle ‚àß
      -- (i)  P is a union of segments of the form `segment01 x‚ÇÅ x‚ÇÇ`
      (‚àÉ A : Set (Fin 2 ‚Üí ‚Ñù), A ‚äÜ Icc ![-1, -1] ![1, 1] ‚àß
        P = ‚ãÉ (p ‚àà A), segment01 (p 0) (p 1)) ‚àß
      -- (ii) for every |v| ‚â§ 1/2 there is a segment with horizontal length v lying in P
      (‚àÄ v : ‚Ñù, |v| ‚â§ (1 / 2 : ‚Ñù) ‚Üí
        ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß
          x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

/-- The same collection, but viewed inside the type of non-empty compact
    subsets of `Fin 2 ‚Üí ‚Ñù`. -/
def P_collection' : Set (NonemptyCompacts (Fin 2 ‚Üí ‚Ñù)) :=
  { P | IsClosed (P : Set (Fin 2 ‚Üí ‚Ñù)) ‚àß (P : Set (Fin 2 ‚Üí ‚Ñù)) ‚äÜ rectangle ‚àß
      (‚àÉ A : Set (Fin 2 ‚Üí ‚Ñù), A ‚äÜ Icc ![-1, -1] ![1, 1] ‚àß
        (P : Set (Fin 2 ‚Üí ‚Ñù)) = ‚ãÉ (p ‚àà A), segment01 (p 0) (p 1)) ‚àß
      (‚àÄ v : ‚Ñù, |v| ‚â§ (1 / 2 : ‚Ñù) ‚Üí
        ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß
          x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

theorem P_collection'_nonempty : (P_collection').Nonempty := by
  let K : NonemptyCompacts (Fin 2 ‚Üí ‚Ñù) :=
    ‚ü®‚ü®rectangle, by
        simpa [rectangle] using (isCompact_Icc : IsCompact (Icc ![(-1 : ‚Ñù), 0] ![1, 1]))‚ü©,
      by
        refine ‚ü®![0,0], ?_‚ü©
        simp [rectangle, Pi.le_def, Fin.forall_fin_two]‚ü©
  refine ‚ü®K, ?_‚ü©
  refine And.intro ?closed <| And.intro ?subset <| And.intro ?union ?prop2
  ¬∑ simpa [rectangle] using (isClosed_Icc : IsClosed (Icc ![(-1 : ‚Ñù), 0] ![1,1]))
  ¬∑ intro x hx
    simpa using hx
  ¬∑ refine ‚ü®Icc ![-1,-1] ![1,1], ?A_sub, ?A_eq‚ü©
    ¬∑ intro p hp
      exact hp
    ¬∑ ext x
      constructor
      ¬∑ intro hx
        refine mem_iUnion.2 ?_
        refine ‚ü®![x 0, x 0], ?_‚ü©
        refine mem_iUnion.2 ?_
        refine ‚ü®by
          have hx01 : x 0 ‚àà Icc (-1 : ‚Ñù) 1 := by
            change x ‚àà rectangle at hx
            simp_all [rectangle, Pi.le_def, Fin.forall_fin_two]
          simpa [Pi.le_def, Fin.forall_fin_two], ?_‚ü©
        have hx1 : x 1 ‚àà Icc (0 : ‚Ñù) 1 := by
          change x ‚àà rectangle at hx
          simp_all [rectangle, Pi.le_def, Fin.forall_fin_two]
        rcases hx1 with ‚ü®h0, h1‚ü©
        refine ‚ü®1 - x 1, x 1, by linarith, by linarith, by ring, ?_‚ü©
        ext i
        fin_cases i <;> simp
        linarith
      ¬∑ intro hx
        rcases mem_iUnion.1 hx with ‚ü®p, hp‚ü©
        rcases mem_iUnion.1 hp with ‚ü®hpA, hxSeg‚ü©
        have hx1 : ![p 0, 0] ‚àà rectangle := by
          simp_all [rectangle, Pi.le_def, Fin.forall_fin_two]
        have hx2 : ![p 1, 1] ‚àà rectangle := by
          simp_all [rectangle, Pi.le_def, Fin.forall_fin_two]
        exact rectangle_convex.segment_subset hx1 hx2 hxSeg
  ¬∑ intro v hv
    refine ‚ü®0, v, ?x1, ?x2, by ring_nf, ?incl‚ü©
    ¬∑ have : |(0 : ‚Ñù)| ‚â§ (1 : ‚Ñù) := by simp
      simp
    ¬∑ have hv' : v ‚àà Icc (-1 : ‚Ñù) 1 := by
        have : |v| ‚â§ (1 : ‚Ñù) := (le_trans hv (by norm_num : (1/2 : ‚Ñù) ‚â§ 1))
        simpa [Icc, abs_le] using this
      exact hv'
    ¬∑ have hx1 : ![0, 0] ‚àà rectangle := by simp [rectangle, Pi.le_def, Fin.forall_fin_two]
      have hx2' : ![v, 1] ‚àà rectangle := by
        simp_all [rectangle, Pi.le_def, Fin.forall_fin_two, abs_le]
        constructor
        all_goals linarith
      exact rectangle_convex.segment_subset hx1 hx2'

/-- Any set in `P_collection` is non‚Äëempty: the segment guaranteed by the
definition already gives a point. -/
theorem Nonempty_P {P : Set (Fin 2 ‚Üí ‚Ñù)} (hP : P ‚àà P_collection) :
    P.Nonempty := by
  rcases hP with ‚ü®-, -, -, h‚ü©
  rcases h 0 (by norm_num) with ‚ü®x‚ÇÅ, x‚ÇÇ, -, -, -, hPseg‚ü©
  exact ‚ü®![x‚ÇÅ, 0], hPseg <| left_mem_segment _ _ _‚ü©

theorem IsBounded_P {P : Set (Fin 2 ‚Üí ‚Ñù)} (hP : P ‚àà P_collection) :
    IsBounded P := by
  rcases hP with ‚ü®-, hS, -‚ü©
  exact rectangle_IsBounded.subset hS

theorem IsCompact_P {P : Set (Fin 2 ‚Üí ‚Ñù)} (hP : P ‚àà P_collection) :
    IsCompact P := by
  simpa [isCompact_iff_isClosed_bounded] using ‚ü®hP.1, IsBounded_P hP‚ü©

/-- The carrier image of `P_collection'` recovers the original set-level collection `P_collection`. -/
theorem P_collection'_image_eq : (‚Üë) '' P_collection' = P_collection := by
  ext P
  constructor
  ¬∑ rintro ‚ü®Q, hQ, rfl‚ü©
    exact hQ
  ¬∑ intro hP
    exact ‚ü®‚ü®‚ü®P, IsCompact_P hP‚ü©, Nonempty_P  hP‚ü©, hP, rfl‚ü©

open Filter

lemma prop_ii_equiv {P : Set (Fin 2 ‚Üí ‚Ñù)} :
    (‚àÄ (v : ‚Ñù), |v| ‚â§ (1/2 : ‚Ñù) ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß x‚ÇÇ ‚àà Icc (-1 : ‚Ñù) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P)
    ‚Üî
    (‚àÄ (v : ‚Ñù), |v| ‚â§ (1/2 : ‚Ñù) ‚Üí ‚àÉ x : Fin 2 ‚Üí ‚Ñù, x ‚àà Icc ![-1, -1] ![1, 1] ‚àß (x 1) - (x 0) = v ‚àß segment01 (x 0) (x 1) ‚äÜ P) := by
  refine ‚ü®fun h v hv ‚Ü¶ ?_, fun h v hv ‚Ü¶ ?_‚ü©
  ¬∑ rcases h v hv with ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, hdiff, hP‚ü©
    let x : Fin 2 ‚Üí ‚Ñù := ![x‚ÇÅ, x‚ÇÇ]
    have : x ‚àà Icc ![-1, -1] ![1, 1] := by simp_all [x, Pi.le_def, Fin.forall_fin_two]
    exact ‚ü®x, this, hdiff, hP‚ü©
  ¬∑ rcases h v hv with ‚ü®x, ‚ü®hx‚ÇÄ, hx‚ÇÅ‚ü©, hdiff, hP‚ü©
    exact ‚ü®x 0, x 1, by all_goals simp_all [Pi.le_def, Fin.forall_fin_two]‚ü©

-- Aaron Liu (Zulip)
-- might call it hausdorffDist_segment_left_le_dist
theorem thing {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] {x y z : E} :
    hausdorffDist (segment ‚Ñù x z) (segment ‚Ñù y z) ‚â§ dist x y := by
  apply hausdorffDist_le_of_mem_dist
  ¬∑ apply dist_nonneg
  ¬∑ rintro _ ‚ü®b, c, hb, hc, hbc, rfl‚ü©
    refine ‚ü®b ‚Ä¢ y + c ‚Ä¢ z, ‚ü®b, c, hb, hc, hbc, rfl‚ü©, ?_‚ü©
    rw [dist_add_right]
    apply (dist_smul_le b x y).trans
    apply mul_le_of_le_one_left
    ¬∑ apply dist_nonneg
    ¬∑ rw [Real.norm_eq_abs, abs_of_nonneg hb]
      linarith
  ¬∑ rintro _ ‚ü®b, c, hb, hc, hbc, rfl‚ü©
    refine ‚ü®b ‚Ä¢ x + c ‚Ä¢ z, ‚ü®b, c, hb, hc, hbc, rfl‚ü©, ?_‚ü©
    rw [dist_add_right, dist_comm]
    apply (dist_smul_le b x y).trans
    apply mul_le_of_le_one_left
    ¬∑ apply dist_nonneg
    ¬∑ rw [Real.norm_eq_abs, abs_of_nonneg hb]
      linarith

/-- In a real normed vector space, every segment is bounded. -/
lemma isBounded_segment {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] (x y : E) :
    IsBounded (segment ‚Ñù x y) := by
  -- The segment is the continuous image of the compact interval `[0,1]`.
  have hcont : Continuous fun t : ‚Ñù => (1 - t) ‚Ä¢ x + t ‚Ä¢ y := by
    continuity
  have hcomp : IsCompact ((fun t : ‚Ñù => (1 - t) ‚Ä¢ x + t ‚Ä¢ y) '' Icc (0 : ‚Ñù) 1) :=
    (isCompact_Icc.image hcont)
  -- Use the standard representation of the segment as that image.
  simpa [segment_eq_image] using hcomp.isBounded

theorem thing_both.extracted_1_1 {Œπ : Type*} {xn yn : Œπ ‚Üí Fin 2 ‚Üí ‚Ñù} {x y : Fin 2 ‚Üí ‚Ñù} (i : Œπ) :
    hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù x y) ‚â§
      hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù (xn i) y) +
        hausdorffDist (segment ‚Ñù (xn i) y) (segment ‚Ñù x y) := by
  apply hausdorffDist_triangle
  refine hausdorffEdist_ne_top_of_nonempty_of_bounded ?_ ?_ ?_ ?_ <;>
  first
  | exact ‚ü®_, left_mem_segment _ _ _‚ü©
  | exact isBounded_segment _ _
  -- apply hausdorffDist_triangle
  -- refine hausdorffEdist_ne_top_of_nonempty_of_bounded ?_ ?_ ?_ ?_
  -- ¬∑ exact ‚ü®_, left_mem_segment _ _ _‚ü©
  -- ¬∑ exact ‚ü®_, left_mem_segment _ _ _‚ü©
  -- ¬∑ exact isBounded_segment _ _
  -- ¬∑ exact isBounded_segment _ _

theorem thing_both {Œπ : Type*} {xn yn : Œπ ‚Üí Fin 2 ‚Üí ‚Ñù} {x y : Fin 2 ‚Üí ‚Ñù} {l : Filter Œπ}
    (hx : Tendsto xn l (ùìù x)) (hy : Tendsto yn l (ùìù y)) :
    Tendsto (fun i ‚Ü¶ hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù x y)) l (ùìù 0) := by

  have htri :
    ‚àÄ i, hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù x y) ‚â§
      hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù (xn i) y)
      + hausdorffDist (segment ‚Ñù (xn i) y) (segment ‚Ñù x y) := by

    intro i
    refine hausdorffDist_triangle ?_
    apply hausdorffEdist_ne_top_of_nonempty_of_bounded
    ¬∑ exact ‚ü®_, left_mem_segment _ _ _‚ü©
    ¬∑ exact ‚ü®_, left_mem_segment _ _ _‚ü©
    ¬∑ exact isBounded_segment _ _
    ¬∑ exact isBounded_segment _ _
  have hA :
      ‚àÄ i, hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù (xn i) y) ‚â§ dist (yn i) y := by
    intro i
    simpa [segment_symm, hausdorffDist_comm] using (thing (E := Fin 2 ‚Üí ‚Ñù) (x := yn i) (y := y) (z := xn i))

  have hB :
      ‚àÄ i, hausdorffDist (segment ‚Ñù (xn i) y) (segment ‚Ñù x y) ‚â§ dist (xn i) x := by
    intro i
    simpa using (thing (E := Fin 2 ‚Üí ‚Ñù) (x := xn i) (y := x) (z := y))

  have hbound :
      ‚àÄ i, hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù x y) ‚â§ dist (yn i) y + dist (xn i) x := by
    intro i
    exact (htri i).trans (add_le_add (hA i) (hB i))

  have hnonneg : ‚àÄ i, 0 ‚â§ hausdorffDist (segment ‚Ñù (xn i) (yn i)) (segment ‚Ñù x y) := by
    intro i
    exact hausdorffDist_nonneg

  have hx0 : Tendsto (fun i ‚Ü¶ dist (xn i) x) l (ùìù 0) := (tendsto_iff_dist_tendsto_zero).1 hx

  have hy0 : Tendsto (fun i ‚Ü¶ dist (yn i) y) l (ùìù 0) := (tendsto_iff_dist_tendsto_zero).1 hy

  have hsum : Tendsto (fun i ‚Ü¶ dist (yn i) y + dist (xn i) x) l (ùìù 0) := by simpa using hy0.add hx0

  exact squeeze_zero (fun i ‚Ü¶ hnonneg i) hbound hsum

lemma isCompact_segment01 (a b : ‚Ñù) :
    IsCompact (segment01 a b : Set (Fin 2 ‚Üí ‚Ñù)) := by
  have : segment ‚Ñù ![a, 0] ![b, 1] = AffineMap.lineMap ![a, 0] ![b, 1] '' Icc (0 : ‚Ñù) 1 := by
    simp [segment_eq_image_lineMap]
  have hcont : Continuous fun t : ‚Ñù => AffineMap.lineMap ![a, 0] ![b, 1] t := by
    continuity
  simpa [segment01, this] using (isCompact_Icc.image hcont)

/-- The Hausdorff extended distance between two `segment01`s is finite. -/
lemma hausdorffEdist_ne_top_segment01 (a b a' b' : ‚Ñù) :
    EMetric.hausdorffEdist
      (segment01 a b : Set (Fin 2 ‚Üí ‚Ñù))
      (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ := by
  have Lne : (segment01 a  b  : Set (Fin 2 ‚Üí ‚Ñù)).Nonempty :=
    ‚ü®![a, 0], by simpa [segment01] using left_mem_segment ‚Ñù ![a,0] ![b,1]‚ü©
  have Rne : (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù)).Nonempty :=
    ‚ü®![a',0], by simpa [segment01] using left_mem_segment ‚Ñù ![a',0] ![b',1]‚ü©
  have Lbd : IsBounded (segment01 a b : Set (Fin 2 ‚Üí ‚Ñù)) := (isCompact_segment01 a b).isBounded
  have Rbd : IsBounded (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù)) := (isCompact_segment01 a' b').isBounded
  exact hausdorffEdist_ne_top_of_nonempty_of_bounded Lne Rne Lbd Rbd

/-- If `L,T` are `segment01`s, any `y ‚àà L` has a point on `T` within the Hausdorff distance. -/
lemma exists_point_on_segment01_within_HD
    {a b a' b' : ‚Ñù} {y : Fin 2 ‚Üí ‚Ñù}
    (hy : y ‚àà (segment01 a b : Set (Fin 2 ‚Üí ‚Ñù))) :
    ‚àÉ t ‚àà (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù)),
      dist t y ‚â§ hausdorffDist (segment01 a b) (segment01 a' b') := by
  -- choose a minimiser on the compact target segment
  obtain ‚ü®t, ht_mem, ht_eq‚ü© :=
    (isCompact_segment01 a' b').exists_infDist_eq_dist
      (by refine ‚ü®![a',0], ?_‚ü©; simpa [segment01] using left_mem_segment ‚Ñù ![a',0] ![b',1])
      y
  -- compare infDist with HD (finiteness from the previous lemma)
  have hfin :
      EMetric.hausdorffEdist
        (segment01 a b : Set (Fin 2 ‚Üí ‚Ñù))
        (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ :=
    hausdorffEdist_ne_top_segment01 a b a' b'
  have h_le :
      Metric.infDist y (segment01 a' b' : Set (Fin 2 ‚Üí ‚Ñù))
        ‚â§ hausdorffDist (segment01 a b) (segment01 a' b') :=
    Metric.infDist_le_hausdorffDist_of_mem
      (x := y) (s := (segment01 a b : Set _))
      (t := (segment01 a' b' : Set _)) hy hfin
  -- turn infDist into a genuine distance via the minimiser `t`
  have : dist t y = Metric.infDist y (segment01 a' b' : Set _) := by
    simpa [dist_comm, eq_comm] using ht_eq
  exact ‚ü®t, ht_mem, by simpa [this] using h_le‚ü©

-- Proven in the proof of 2.2
theorem thing_again {Œπ : Type*} {sn : Œπ ‚Üí Set (Fin 2 ‚Üí ‚Ñù)} {p‚Çô : Œπ ‚Üí Fin 2 ‚Üí ‚Ñù}
    {L : Set (Fin 2 ‚Üí ‚Ñù)} {k : Fin 2 ‚Üí ‚Ñù} {l : Filter Œπ}
    (h : ‚àÄ i, p‚Çô i ‚àà sn i)
    (hL : IsClosed L)
    (hs : Tendsto (fun i ‚Ü¶ hausdorffDist (sn i) L) l (ùìù 0))
    (hx : Tendsto p‚Çô l (ùìù k)) :
    k ‚àà L := by
  sorry

theorem P_col'_IsClosed : IsClosed P_collection' := by
  rw [‚Üê isSeqClosed_iff_isClosed, IsSeqClosed]
  intro P‚Çô K h_mem h_lim
  have h_closed : IsClosed (K : Set (Fin 2 ‚Üí ‚Ñù)) := (K.toCompacts.isCompact).isClosed
  rw [Metric.tendsto_atTop] at h_lim
  -- simp only [Metric.NonemptyCompacts.dist_eq] at h_lim
  have hPn_bdd (n : ‚Ñï) : IsBounded (P‚Çô n : Set (Fin 2 ‚Üí ‚Ñù)) := IsBounded_P (h_mem n)
  have hK_bdd : IsBounded (K : Set (Fin 2 ‚Üí ‚Ñù)) := (K.toCompacts.isCompact).isBounded
  have fin_dist (n : ‚Ñï) : EMetric.hausdorffEdist (P‚Çô n) (K : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† ‚ä§ :=
    hausdorffEdist_ne_top_of_nonempty_of_bounded (P‚Çô n).nonempty K.nonempty (hPn_bdd n) hK_bdd

  have : ‚àÄ k ‚àà K, ‚àÄ n, ‚àÉ p ‚àà P‚Çô n, dist p k ‚â§ dist K (P‚Çô n) := by
    intro k hk n
    simp only [Metric.NonemptyCompacts.dist_eq] at h_lim
    obtain ‚ü®p, hp_mem, hp_eq‚ü© := (P‚Çô n).isCompact.exists_infDist_eq_dist (P‚Çô n).nonempty k
    have hpk : dist p k = Metric.infDist k (P‚Çô n : Set _) := by
      simpa [eq_comm, dist_comm] using hp_eq
    have fin : EMetric.hausdorffEdist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô n : Set _) ‚â† ‚ä§ := by
      simpa [EMetric.hausdorffEdist_comm] using fin_dist n
    have h_le : Metric.infDist k (P‚Çô n : Set _) ‚â§ Metric.hausdorffDist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô n : Set _) := by
      apply Metric.infDist_le_hausdorffDist_of_mem (x := k) (s := (K : Set _)) (t := (P‚Çô n : Set _)) hk fin
    have h_dist : dist p k ‚â§ dist K (P‚Çô n) := by
      simpa [Metric.NonemptyCompacts.dist_eq, hpk] using h_le
    exact ‚ü®p, hp_mem, h_dist‚ü©

  choose p‚Çô hp‚Çô_mem hp‚Çô_lt using this

  -- extract_goal
  have h_tendsto : ‚àÄ (k : Fin 2 ‚Üí ‚Ñù) (hk : k ‚àà K), Tendsto (fun n ‚Ü¶ p‚Çô k hk n) atTop (ùìù k) := by
    intro k hk
    rw [NormedAddCommGroup.tendsto_atTop']
    intro Œµ hŒµ
    obtain ‚ü®N, hN‚ü© := h_lim Œµ hŒµ
    refine ‚ü®N, fun n hn ‚Ü¶ ?_‚ü©
    have h_le : dist (p‚Çô k hk n) k ‚â§ dist K (P‚Çô n) := hp‚Çô_lt k hk n
    have h_small : dist K (P‚Çô n) < Œµ := by
      simpa [dist_comm] using hN n (Nat.le_of_lt hn)
    exact lt_of_le_of_lt h_le h_small

  have h_sub : (K : Set _) ‚äÜ rectangle := by
    have hP_sub : ‚àÄ n, (P‚Çô n : Set _) ‚äÜ rectangle := by
      intro n
      rcases h_mem n with ‚ü®_, h_subset, _, _‚ü©
      exact h_subset
    have rect_closed : IsClosed rectangle := by
      rw [rectangle]
      exact isClosed_Icc

    -- Main argument
    intro k' hk'
    by_contra h_notin

    have h_pos : 0 < Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) := by
      have h_ne : Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) ‚â† 0 := by
        intro h_eq
        have h_cl : k' ‚àà closure (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) := by
          rw [Metric.mem_closure_iff_infDist_zero]
          ¬∑ exact h_eq
          ¬∑ dsimp [rectangle]
            refine ‚ü®![0, 0], by simp [Pi.le_def, Fin.forall_fin_two]‚ü©
        have : k' ‚àà rectangle := by
          simpa [rect_closed.closure_eq] using h_cl
        exact h_notin this
      exact lt_of_le_of_ne Metric.infDist_nonneg h_ne.symm

    set d : ‚Ñù := Metric.infDist k' (rectangle : Set (Fin 2 ‚Üí ‚Ñù)) with hd
    have h_half_pos : 0 < d / 2 := by linarith
    obtain ‚ü®N, hN‚ü© := h_lim (d / 2) h_half_pos

    have h_haus : hausdorffDist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô N : Set _) < d / 2 := by
      have : dist (P‚Çô N) K < d / 2 := hN N (le_rfl)
      simpa [Metric.NonemptyCompacts.dist_eq, dist_comm] using this

    have h_edist_ne : EMetric.hausdorffEdist (K : Set (Fin 2 ‚Üí ‚Ñù)) (P‚Çô N : Set _) ‚â† ‚ä§ := by
      simpa [EMetric.hausdorffEdist_comm] using fin_dist N

    obtain ‚ü®y, hyP, hy_lt‚ü© := Metric.exists_dist_lt_of_hausdorffDist_lt hk' h_haus h_edist_ne

    have hy_rect : y ‚àà rectangle := (hP_sub N) hyP

    have hd_le : d ‚â§ dist k' y := by
      have h_le := Metric.infDist_le_dist_of_mem (x := k') hy_rect
      simpa [hd] using h_le

    have : dist k' y < d := by
      have : dist k' y < d / 2 := hy_lt
      exact lt_of_lt_of_le this (by linarith)
    exact (not_lt_of_ge hd_le) this

  have h_union : ‚àÉ A ‚äÜ Icc ![-1, -1] ![1, 1], K = ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by

    have h_seg_exists : ‚àÄ (k : Fin 2 ‚Üí ‚Ñù) (hk : k ‚àà (K : Set (Fin 2 ‚Üí ‚Ñù))) (n : ‚Ñï), ‚àÉ (x : Fin 2 ‚Üí ‚Ñù), x ‚àà Icc ![-1,-1] ![1,1] ‚àß p‚Çô k hk n ‚àà segment01 (x 0) (x 1) ‚àß segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
      intro k hk n
      rcases h_mem n with ‚ü®_, _, ‚ü®A, hA_sub, hA_eq‚ü©, _‚ü©
      have : p‚Çô k hk n ‚àà ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by
        rw [‚ÜêhA_eq]
        exact hp‚Çô_mem k hk n
      rcases mem_iUnion‚ÇÇ.1 this with ‚ü®p, hpA, hp_seg‚ü©
      let x : Fin 2 ‚Üí ‚Ñù := ![p 0, p 1]
      have hx : x ‚àà Icc ![-1, -1] ![1, 1] := by
        simpa [Nat.succ_eq_add_one, Nat.reduceAdd, Fin.isValue, mem_Icc, Pi.le_def, Fin.forall_fin_two, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one, x] using hA_sub hpA
      have hsub : segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
        intro y hy
        simp only [Fin.isValue, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one,
          x] at hy
        have : y ‚àà ‚ãÉ p ‚àà A, segment01 (p 0) (p 1) := by
          apply mem_iUnion‚ÇÇ.2
          use p
        rwa [‚ÜêhA_eq] at this
      exact ‚ü®x, hx, hp_seg, hsub‚ü©

    choose x hx h_pn_in_seg_n h_seg_subset_n using h_seg_exists

    set A : Set (Fin 2 ‚Üí ‚Ñù) := { p | p ‚àà Icc ![-1,-1] ![1,1] ‚àß segment01 (p 0) (p 1) ‚äÜ (K : Set (Fin 2 ‚Üí ‚Ñù)) } with hA

    have hA_sub : A ‚äÜ  Icc ![-1, -1] ![1, 1] := by
      rintro p ‚ü®hp_in, _‚ü©
      exact hp_in

    refine ‚ü®A, hA_sub, ?_‚ü©
    ext k
    constructor
    ¬∑ intro hk
      obtain ‚ü®x_lim, hx_lim_mem, œÜ, hœÜ, hœÜ_lim‚ü© := isCompact_Icc.tendsto_subseq (hx k hk)
      set L := segment01 (x_lim 0) (x_lim 1) with hL
      -- set L : NonemptyCompacts (Fin 2 ‚Üí ‚Ñù) := ‚ü®‚ü®segment01 (x_lim 0) (x_lim 1), isCompact_segment01 _ _‚ü©, by
      --   simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)‚ü©
      -- with hL

      have h_seg_j_P : ‚àÄ j, segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1) ‚äÜ P‚Çô (œÜ j) := by
        intro j y hy
        apply h_seg_subset_n
        exact hy

      have h_seg_HD0 : Tendsto (fun j => hausdorffDist (segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1)) L) atTop (ùìù 0) := by
        apply thing_both
        all_goals simp_all [tendsto_pi_nhds, Fin.forall_fin_two]
      observe h_L_compact : IsCompact L
      refine mem_iUnion.2 ?_
      refine ‚ü®x_lim, ?_‚ü©
      refine mem_iUnion.2 ?_
      refine ‚ü®?hxlim_in_A, ?k_in_L‚ü©
      have hLsubK : L ‚äÜ (K : Set _) := by
        have ye : ‚àÄ (j : ‚Ñï), hausdorffDist L K ‚â§ hausdorffDist L (segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1)) + hausdorffDist (segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1)) K := by
          intro j
          refine hausdorffDist_triangle ?_
          apply hausdorffEdist_ne_top_of_nonempty_of_bounded
          ¬∑ rw [hL]
            exact ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©
          ¬∑ exact ‚ü®![x k hk (œÜ j) 0, 0], left_mem_segment _ _ _‚ü©
          ¬∑ exact h_L_compact.isBounded
          ¬∑ have : IsCompact (segment01 (x k hk (œÜ j) 0) (x k hk (œÜ j) 1)) := isCompact_segment01 _ _
            exact this.isBounded
        have bah : hausdorffDist L K ‚â§ 0 := by sorry
        have final : hausdorffDist L K = 0 := by
          -- refine squeeze_zero
          -- refine le_of_tendsto_of_tendsto'
          sorry
        rw [Metric.hausdorffDist_zero_iff_closure_eq_closure, IsClosed.closure_eq, IsClosed.closure_eq] at final
        ¬∑ simp [final]
        ¬∑ exact h_closed
        ¬∑ exact IsCompact.isClosed h_L_compact
        ¬∑ apply hausdorffEdist_ne_top_of_nonempty_of_bounded
          ¬∑ simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)
          ¬∑ exact NonemptyCompacts.nonempty K
          ¬∑ exact h_L_compact.isBounded
          ¬∑ exact hK_bdd
      ¬∑ exact ‚ü®hx_lim_mem, by simpa [hL] using hLsubK‚ü©
      ¬∑ observe hL_compact : IsCompact L
        observe hL_closed : IsClosed L
        have h_inf_to_zero : Tendsto (fun j ‚Ü¶ infDist (p‚Çô k hk (œÜ j)) L) atTop (ùìù 0) := by
          refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds h_seg_HD0 ?lower ?upper
          ¬∑ intro i
            exact infDist_nonneg
          ¬∑ intro i
            apply infDist_le_hausdorffDist_of_mem
            ¬∑ exact h_pn_in_seg_n k hk (œÜ i)
            ¬∑ exact hausdorffEdist_ne_top_segment01 (x k hk (œÜ i) 0) (x k hk (œÜ i) 1) (x_lim 0) (x_lim 1)
        have h_inf_to_k : Tendsto (fun j ‚Ü¶ infDist (p‚Çô k hk (œÜ j)) L) atTop (ùìù (infDist k L)) := by
          have hcont : Continuous (fun x => infDist x L) := by
            simpa using (Metric.continuous_infDist_pt (s := L))
          apply (hcont.tendsto k).comp
          have : Tendsto (fun j ‚Ü¶ p‚Çô k hk (œÜ j)) atTop (ùìù k) := by
            have hœÜ_tendsto : Tendsto œÜ atTop atTop := StrictMono.tendsto_atTop hœÜ
            exact (h_tendsto k hk).comp hœÜ_tendsto
          exact this
        have h_k_zero : infDist k L = 0 := tendsto_nhds_unique h_inf_to_k h_inf_to_zero
        have hk_closure : k ‚àà closure L := by
          rw [mem_closure_iff_infDist_zero]
          ¬∑ exact h_k_zero
          ¬∑ simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)
        simpa [hL_closed.closure_eq] using hk_closure
    ¬∑ intro hk_union
      rcases mem_iUnion‚ÇÇ.1 hk_union with ‚ü®p, hpA, hk_seg‚ü©
      rw [hA] at hpA
      rcases hpA with ‚ü®_, hseg_sub‚ü©
      exact hseg_sub hk_seg

  -- PROPERTY 2

  have h_forall : ‚àÄ (v : ‚Ñù), |v| ‚â§ 1 / 2 ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ, x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ K := by
    intro v hv
    have h_exists : ‚àÄ n, ‚àÉ x : Fin 2 ‚Üí ‚Ñù, x ‚àà Icc ![-1, -1] ![1, 1] ‚àß (x 1) - (x 0) = v ‚àß segment01 (x 0) (x 1) ‚äÜ P‚Çô n := by
      intro n
      rcases h_mem n with ‚ü®_, _, _, h_prop‚ÇÇ‚ü©
      rcases h_prop‚ÇÇ v hv with ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, hdiffn, hsegPn‚ü©
      set x : Fin 2 ‚Üí ‚Ñù := ![x‚ÇÅ, x‚ÇÇ] with h
      have hx : x ‚àà Icc ![-1, -1] ![1, 1] := by
        simp_all [Fin.forall_fin_two, Pi.le_def]
      have hdiff : (x 1) - (x 0) = v := by simp [x, hdiffn]
      have hsub : segment01 (x 0) (x 1) ‚äÜ (P‚Çô n : Set _) := by
        intro y hy
        convert hsegPn hy
      exact ‚ü®x, hx, hdiff, hsub‚ü©

    choose! x hx hdiff h_segP using h_exists

    obtain ‚ü®x_lim, hx_lim_mem, œÜ, hœÜ, hœÜ_lim‚ü© := isCompact_Icc.tendsto_subseq hx

    have h_seg_n_P : ‚àÄ j, segment01 (x (œÜ j) 0) (x (œÜ j) 1) ‚äÜ P‚Çô (œÜ j) := by
      intro n y hy
      apply h_segP
      exact hy

    set L := segment01 (x_lim 0) (x_lim 1) with hL
    -- set L : NonemptyCompacts (Fin 2 ‚Üí ‚Ñù) := ‚ü®‚ü®segment01 (x_lim 0) (x_lim 1), isCompact_segment01 _ _‚ü©, by
    --     simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)‚ü©
    --   with hL

    refine ‚ü®x_lim 0, x_lim 1, ?hx0, ?hx1, ?hdiff_lim, ?hLsubK‚ü©
    ¬∑ exact (by simp_all [Pi.le_def, Fin.forall_fin_two])
    ¬∑ sorry
      -- exact (by simp_all [Pi.le_def, Fin.forall_fin_two])
    ¬∑ have h0 : Tendsto (fun j ‚Ü¶ (x (œÜ j)) 0) atTop (ùìù (x_lim 0)) := ((continuous_apply 0).tendsto _).comp hœÜ_lim
      have h1 : Tendsto (fun j ‚Ü¶ (x (œÜ j)) 1) atTop (ùìù (x_lim 1)) := ((continuous_apply 1).tendsto _).comp hœÜ_lim
      have hsub : Tendsto (fun j ‚Ü¶ (x (œÜ j) 1 - x (œÜ j) 0)) atTop (ùìù (x_lim 1 - x_lim 0)) := h1.sub h0
      have hconst : Tendsto (fun _ : ‚Ñï ‚Ü¶ v) atTop (ùìù v) := tendsto_const_nhds
      have : Tendsto (fun j ‚Ü¶ (x (œÜ j) 1 - x (œÜ j) 0)) atTop (ùìù v) := by simp [hdiff]
      exact tendsto_nhds_unique hsub this
    ¬∑ show L ‚äÜ K
      observe h_L_compact : IsCompact L
      have final : hausdorffDist L K = 0 := by sorry
      rw [Metric.hausdorffDist_zero_iff_closure_eq_closure, IsClosed.closure_eq, IsClosed.closure_eq] at final
      ¬∑ simp [final]
      ¬∑ exact h_closed
      ¬∑ exact IsCompact.isClosed h_L_compact
      ¬∑ apply hausdorffEdist_ne_top_of_nonempty_of_bounded
        ¬∑ simpa [segment01] using (show (segment ‚Ñù ![x_lim 0, 0] ![x_lim 1, 1]).Nonempty from ‚ü®![x_lim 0, 0], left_mem_segment _ _ _‚ü©)
        ¬∑ exact NonemptyCompacts.nonempty K
        ¬∑ exact h_L_compact.isBounded
        ¬∑ exact hK_bdd

  exact ‚ü®h_closed, h_sub, h_union, h_forall‚ü©

#exit

--So I need to prove 2.4 which will be used to prove 2.5 which then implies 2.3

-- https://proofwiki.org/wiki/Subspace_of_Complete_Metric_Space_is_Closed_iff_Complete
lemma P_col'_CompleteSpace : CompleteSpace P_collection' := IsClosed.completeSpace_coe P_col'_IsClosed

lemma P_col'_BaireSpace [CompleteSpace P_collection'] : BaireSpace P_collection' := BaireSpace.of_pseudoEMetricSpace_completeSpace

noncomputable section

/-- A closed, axis‚Äìaligned rectangle `[x‚ÇÅ,x‚ÇÇ] √ó [y‚ÇÅ,y‚ÇÇ]`
    written in the `Fin 2 ‚Üí ‚Ñù` model of `‚Ñù¬≤`. -/
def axisRect (x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : ‚Ñù) : Set (Fin 2 ‚Üí ‚Ñù) :=
  {p | p 0 ‚àà Icc x‚ÇÅ x‚ÇÇ ‚àß p 1 ‚àà Icc y‚ÇÅ y‚ÇÇ}

/-- Horizontal slice of a planar set at height `y`. -/
def hSlice (S : Set (Fin 2 ‚Üí ‚Ñù)) (y : ‚Ñù) : Set ‚Ñù :=
  {x | (![x, y] : Fin 2 ‚Üí ‚Ñù) ‚àà S}

/-- The vertical window `W v Œµ := [0,1] ‚à© [v-Œµ,v+Œµ]`. -/
def window (v Œµ : ‚Ñù) : Set ‚Ñù :=
  Icc 0 1 ‚à© Icc (v - Œµ) (v + Œµ)

/-- The "good cover" condition appearing in Lemma 2.4. -/
def hasThinCover (P : Set (Fin 2 ‚Üí ‚Ñù)) (v Œµ : ‚Ñù) : Prop :=
  ‚àÉ (R : Finset (Set (Fin 2 ‚Üí ‚Ñù))),
      -- every element of `R` is an axis‚Äìaligned rectangle
      (‚àÄ r ‚àà R, ‚àÉ a b c d, r = axisRect a b c d) ‚àß
      -- each slice of `P` in the window is covered by `‚ãÉ R`
      (‚àÄ y, y ‚àà window v Œµ ‚Üí
        hSlice P y ‚äÜ hSlice (‚ãÉ r ‚àà R, (r : Set _)) y) ‚àß
      -- and the total horizontal length is < 100 Œµ
      (‚àÄ y, y ‚àà window v Œµ ‚Üí (volume (hSlice (‚ãÉ r ‚àà R, (r : Set _)) y)).toReal < 100 * Œµ)

-- instance : MetricSpace P_collection' := inferInstance   -- inherits the Hausdorff metric `d`

-- We dont need this.
-- `ùí´(v, Œµ)` inside plain subsets of the big rectangle.
-- def P_v_eps (v Œµ : ‚Ñù) : Set P_collection :=
--   {P | hasThinCover P v Œµ}

/-- The same collection, but as a subset of the Hausdorff‚Äìmetric
    space `NonemptyCompacts (Fin 2 ‚Üí ‚Ñù)`. -/
def P_v_eps' (v Œµ : ‚Ñù) : Set P_collection' :=
  {P | hasThinCover (P : Set _) v Œµ}

theorem P_v_eps'_nonempty {v Œµ : ‚Ñù} (hv‚ÇÄ : 0 ‚â§ v) (hv‚ÇÅ : v ‚â§ 1) (hŒµ : 0 < Œµ) :
    (P_v_eps' v Œµ).Nonempty := by
  sorry

-- helper: expand an axis-aligned rectangle by Œ∑ in both directions
def axisRectExpand (Œ∑ : ‚Ñù) (a b c d : ‚Ñù) : Set (Fin 2 ‚Üí ‚Ñù) :=
  axisRect (a - Œ∑) (b + Œ∑) (c - Œ∑) (d + Œ∑)

lemma axisRect_subset_expand {a b c d : ‚Ñù} :
    ‚àÉ Œ∑ > 0, axisRect a b c d ‚äÜ axisRectExpand Œ∑ a b c d := by
  sorry
  -- intro p hp
  -- rcases hp with ‚ü®hx, hy‚ü©
  -- simp_rw [axisRectExpand, axisRect]
  -- constructor
  -- ¬∑ apply Icc_subset_Icc_left (sub_nonpos.mpr (by sorry))
  --   sorry
  -- ¬∑ apply Icc_subset_Icc_left (sub_nonpos.mpr (by sorry))
  --   sorry
  -- exact ‚ü®by exact Icc_subset_Icc_left (sub_nonpos.mpr (by linarith)) hx,
    -- by exact Icc_subset_Icc_left (sub_nonpos.mpr (by linarith)) hy‚ü©

/-- If `q` is inside an axis‚Äìaligned rectangle and `p` is within distance `Œ∑` of `q`,
then `p` lies in the rectangle thickened by `Œ∑` in both axes. -/
lemma mem_thickened_axisRect_of_close {a b c d Œ∑ : ‚Ñù} {p q : Fin 2 ‚Üí ‚Ñù} (hq : q ‚àà axisRect a b c d) (hpq : dist p q ‚â§ Œ∑) :
    p ‚àà axisRectExpand Œ∑ a b c d := by
  rcases hq with ‚ü®hx, hy‚ü©
  refine ‚ü®?_, ?_‚ü©
  ¬∑ have aux : |p 0 - q 0| ‚â§ Œ∑ := by
      sorry
    have hx' : a ‚â§ q 0 ‚àß q 0 ‚â§ b := hx
    constructor
    ¬∑ have : a - Œ∑ ‚â§ p 0 := by
        sorry
      simpa using this
    ¬∑ have : p 0 ‚â§ b + Œ∑ := by
        sorry
      simpa using this
  ¬∑ have aux : |p 1 - q 1| ‚â§ Œ∑ := by
      sorry
    rcases hy with ‚ü®hyL, hyU‚ü©
    constructor
    ¬∑ have : c - Œ∑ ‚â§ p 1 := by sorry
      simpa using this
    ¬∑ have : p 1 ‚â§ d + Œ∑ := by sorry
      simpa using this

theorem P_v_eps_open {v Œµ : ‚Ñù} (hv‚ÇÄ : 0 ‚â§ v) (hv‚ÇÅ : v ‚â§ 1) (hŒµ : 0 < Œµ) :
    IsOpen (P_v_eps' v Œµ) := by
  rw [Metric.isOpen_iff]
  intro P hP
  rcases hP with ‚ü®R, h_rects, h_cover, h_le‚ü©
  dsimp only [ball]
  sorry

/--
In a Baire space, every nonempty open set is non‚Äêmeagre,
that is, it cannot be written as a countable union of nowhere‚Äêdense sets.
-/
theorem not_isMeagre_of_isOpen {X : Type*} {s : Set X} [TopologicalSpace X] [BaireSpace X]
  (hs : IsOpen s) (hne : s.Nonempty) :
    ¬¨ IsMeagre s := by
  intro h
  rcases (dense_of_mem_residual (by rwa [IsMeagre] at h)).inter_open_nonempty s hs hne
    with ‚ü®x, hx, hxc‚ü©
  exact hxc hx

theorem P_v_eps_dense {v Œµ : ‚Ñù} (hv‚ÇÄ : 0 ‚â§ v) (hv‚ÇÅ : v ‚â§ 1) (hŒµ : 0 < Œµ) :
    Dense (P_v_eps' v Œµ) := by
  sorry

theorem lemma_2_4 {v Œµ : ‚Ñù} (hv‚ÇÄ : 0 ‚â§ v) (hv‚ÇÅ : v ‚â§ 1) (hŒµ : 0 < Œµ) :
    IsClosed (P_v_eps' v Œµ)·∂ú ‚àß IsNowhereDense (P_v_eps' v Œµ)·∂ú := by
  simp_rw [isClosed_isNowhereDense_iff_compl, compl_compl]
  exact ‚ü®P_v_eps_open hv‚ÇÄ hv‚ÇÅ hŒµ, P_v_eps_dense hv‚ÇÄ hv‚ÇÅ hŒµ‚ü©

variable [BaireSpace P_collection']

theorem P_v_eps'_not_meagre {v Œµ : ‚Ñù} (h0 : 0 ‚â§ v) (h1 : v ‚â§ 1) (hŒµ : 0 < Œµ) :
    ¬¨ IsMeagre (P_v_eps' v Œµ) :=
  not_isMeagre_of_isOpen (P_v_eps_open h0 h1 hŒµ) (P_v_eps'_nonempty h0 h1 hŒµ)

def Pn (n : ‚Ñï): Set P_collection' := ‚ãÇ r ‚àà Finset.range (n + 1), P_v_eps' (r / n) ((1 : ‚Ñï) / n)

def Pstar : Set P_collection' := ‚ãÇ n, Pn n

-- Junk?
lemma P_r_n_not_meagre (n r : ‚Ñï) (hn : 0 < n) (hrn : r ‚â§ n) : ¬¨ IsMeagre (P_v_eps' (r / n) ((1 : ‚Ñï) / n)) :=  by
  apply not_isMeagre_of_isOpen
  ¬∑ apply P_v_eps_open
    ¬∑ positivity
    ¬∑ rw [div_le_iff‚ÇÄ, one_mul, Nat.cast_le]
      ¬∑ exact hrn
      ¬∑ exact Nat.cast_pos'.mpr hn
    ¬∑ positivity
  ¬∑ apply P_v_eps'_nonempty
    ¬∑ positivity
    ¬∑ rw [div_le_iff‚ÇÄ, one_mul, Nat.cast_le]
      ¬∑ exact hrn
      ¬∑ exact Nat.cast_pos'.mpr hn
    ¬∑ positivity

/-- A set of second category (i.e. non-meagre) is nonempty. -/
lemma nonempty_of_not_IsMeagre {X : Type*} [TopologicalSpace X] {s : Set X} (hs : ¬¨IsMeagre s) : s.Nonempty := by
  contrapose! hs
  simpa [hs] using (IsMeagre.empty)

-- Very ugly proof
lemma Pn_IsOpen (n r : ‚Ñï) (hn : 0 < n) (hrn : r ‚â§ n) : IsOpen (Pn n) := by
  rw [Pn]
  apply isOpen_biInter_finset
  intro k hk
  simp only [Finset.mem_range] at hk
  apply P_v_eps_open
  ¬∑ exact div_nonneg (Nat.cast_nonneg' k) (Nat.cast_nonneg' n)
  ¬∑ rw [div_le_one_iff]
    constructor
    constructor
    ¬∑ exact Nat.cast_pos'.mpr hn
    ¬∑ field_simp
      exact Nat.le_of_lt_succ hk
  ¬∑ simp only [Nat.cast_one, one_div, inv_pos, Nat.cast_pos]
    exact hn

/-- Each finite layer `P_{n+1}` is open. -/
lemma Pn_isOpen_succ (n : ‚Ñï) : IsOpen (Pn (n.succ)) := by
  dsimp [Pn]
  refine isOpen_biInter_finset ?_
  intro r hr
  have hr_le : r ‚â§ n.succ := Nat.le_of_lt_succ (by simpa [Finset.mem_range] using hr)
  have hv‚ÇÄ : 0 ‚â§ (r : ‚Ñù) / (n.succ : ‚Ñù) :=
    div_nonneg (by exact_mod_cast Nat.zero_le r) (by exact_mod_cast Nat.zero_le n.succ)
  have hv‚ÇÅ : (r : ‚Ñù) / (n.succ : ‚Ñù) ‚â§ 1 := by
    have hnpos : (0 : ‚Ñù) < (n.succ : ‚Ñù) := by exact_mod_cast Nat.succ_pos n
    have : (r : ‚Ñù) ‚â§ (n.succ : ‚Ñù) := by exact_mod_cast hr_le
    exact (div_le_one hnpos).2 this
  have hŒµ : 0 < (1 : ‚Ñù) / (n.succ : ‚Ñù) := by
    have hnpos : (0 : ‚Ñù) < (n.succ : ‚Ñù) := by exact_mod_cast Nat.succ_pos n
    simpa [one_div] using inv_pos.mpr hnpos
  simpa using P_v_eps_open hv‚ÇÄ hv‚ÇÅ hŒµ

/-- Therefore `P_{n+1}` is a `GŒ¥` set. -/
lemma Pn_isGŒ¥_succ (n : ‚Ñï) : IsGŒ¥ (Pn (n.succ)) :=
  (Pn_isOpen_succ n).isGŒ¥

lemma Dense_Pn (n r : ‚Ñï) (hn : 0 < n) (hrn : r ‚â§ n) : Dense (Pn n) := by
  rw [Pn]
  refine dense_iInter_of_isOpen ?isOpen ?dense
  all_goals intro i
  all_goals dsimp
  ¬∑ sorry
  ¬∑ sorry

lemma Pn_nonempty (n r : ‚Ñï) (hn : 0 < n) (hrn : r ‚â§ n) : (Pn n).Nonempty := by
  simp_rw [Pn]

  -- BY baire ? Intersection of a sequence of dense open sets is nonempty
  --https://math.stackexchange.com/questions/221423/proving-baires-theorem-the-intersection-of-a-sequence-of-dense-open-subsets-of
  -- A countable intersection of dense open sets is nonempty.
  -- https://www.ucl.ac.uk/~ucahad0/3103_handout_7.pdf
  -- Corollary 7.4
  sorry

-- Easy, the finite intersection of open sets is open, then apply lemma from above
lemma something1 (n : ‚Ñï) (hn : 0 < n) : ¬¨ IsMeagre (Pn n) := by
  exact not_isMeagre_of_isOpen (Pn_IsOpen n (Nat.succ 0) hn hn) (Pn_nonempty n (Nat.succ 0) hn hn)

theorem Dense_Pstar : Dense Pstar := by
  rw [Pstar]
  apply dense_iInter_of_isOpen
  all_goals intro n
  all_goals rw [Pn]
  ¬∑ sorry
  ¬∑ sorry

theorem IsGŒ¥_PStar : IsGŒ¥ Pstar := by
    -- isGŒ¥_iInter_of_open (U := fun n : ‚Ñï => Pn (n.succ)) (fun n => Pn_isOpen_succ n)
  -- apply IsGŒ¥.iInter_of_isOpen ?_

  -- simp_rw [Pn, Finset.mem_range, Nat.cast_one, one_div]
  -- refine IsGŒ¥.iInter_of_isOpen ?_
  -- intro i
  sorry

/-- In a nonempty Baire space, any dense `GŒ¥` set is not meagre. -/
theorem IsGŒ¥_dense_not_meagre {X : Type*} [Nonempty X] [TopologicalSpace X] [BaireSpace X] {s : Set X} (hs : IsGŒ¥ s) (hd : Dense s) : ¬¨ IsMeagre s := by
  intro h
  rcases (mem_residual).1 h with ‚ü®t, hts, htG, hd'‚ü©
  rcases (hd.inter_of_GŒ¥ hs htG hd').nonempty with ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü©
  exact (hts hx‚ÇÇ) hx‚ÇÅ

/-- In a nonempty Baire space, a residual (comeagre) set is not meagre. -/
lemma not_isMeagre_of_mem_residual {X : Type*} [TopologicalSpace X]
    [BaireSpace X] [Nonempty X] {s : Set X} (hs : s ‚àà residual X) :
    ¬¨ IsMeagre s := by
  -- From `mem_residual`, pick a dense GŒ¥ subset `t ‚äÜ s`.
  rcases (mem_residual (X := X)).1 hs with ‚ü®t, ht_sub, htGŒ¥, ht_dense‚ü©
  -- Dense GŒ¥ sets aren‚Äôt meagre in a nonempty Baire space.
  -- If `s` were meagre, then so would be `t ‚äÜ s`, contradiction.
  intro hs_meagre
  exact not_isMeagre_of_isGŒ¥_of_dense htGŒ¥ ht_dense (hs_meagre.mono ht_sub)

lemma Pstar_notMeagre : ¬¨ IsMeagre (Pstar) := by
  haveI : Nonempty P_collection' := by
    rcases P_collection'_nonempty with ‚ü®P, hP‚ü©
    exact ‚ü®P, hP‚ü©
  exact IsGŒ¥_dense_not_meagre IsGŒ¥_PStar Dense_Pstar

/-- The sets `P` in `ùí´` whose horizontal slice at every height `u ‚àà [0,1]`
has Lebesgue measure zero. This is the set denoted `ùìî` in Theorem 2.5. -/
def E_set : Set P_collection' :=
  {P | ‚àÄ u ‚àà Icc (0 : ‚Ñù) 1, volume (hSlice (P : Set (Fin 2 ‚Üí ‚Ñù)) u) = 0}

-- Maybe i need to show the E set is not empty
-- no, it is handled bby belows

lemma Pstar_sub_E_set : Pstar ‚äÜ E_set := by
  intro P hP
  have hMem_n : ‚àÄ n, P ‚àà Pn n := by
    intro n
    simpa [Pstar] using (mem_iInter.mp hP n)
  intro u hu
  simp_rw [Pn, P_v_eps', hasThinCover, hSlice] at hMem_n
  have bound : ‚àÄ n > 0, (volume (hSlice (P : Set _) u)).toReal ‚â§ 100 / (n : ‚Ñï) := by
    intro n hn
    -- this comes from the defining property of it being ‚â§ 100Œµ
    simp_rw [hSlice]
    obtain ‚ü®r, hr, hur‚ü© : ‚àÉ r ‚àà Finset.range (n + 1), u ‚àà window ((r : ‚Ñù) / n) (1 / n) := by
      sorry
    have hPn := (Set.mem_iInter‚ÇÇ.mp (hMem_n n)) r hr
    rcases hPn with ‚ü®R, _hRaxis, hsub, hvol‚ü©
    have hmono : (volume {x | ![x, u] ‚àà (P : Set (Fin 2 ‚Üí ‚Ñù))}).toReal ‚â§ (volume {x | ![x, u] ‚àà ‚ãÉ r ‚àà R, r}).toReal := by
      -- exact ENNReal.toReal_mono (measure_mono hsub u.toNNReal hur)
      sorry
    have hbound : (volume {x | ![x, u] ‚àà ‚ãÉ r ‚àà R, r}).toReal ‚â§ 100 / (n : ‚Ñù) := by
      sorry
    exact hmono.trans hbound
  apply le_antisymm _ (by positivity)
  apply le_of_forall_ge
  intro Œµ hŒµ
  sorry

theorem thm2_5 : ¬¨IsMeagre E_set := by
  intro h
  observe : Pstar ‚äÜ E_set
  apply IsMeagre.mono at this
  ¬∑ simpa [Pstar_notMeagre]
  ¬∑ exact h

def P_zero_vol : Set P_collection' := {P | volume (P : Set (Fin 2 ‚Üí ‚Ñù)) = 0}

lemma E_sub_P_zero_vol : E_set ‚äÜ P_zero_vol := by
  intro P hP
  simp_rw [P_zero_vol, mem_setOf_eq, ‚Üê MeasureTheory.setLIntegral_one]

  -- #check MeasureTheory.measurePreserving_finTwoArrow (volume : Measure ‚Ñù)
  -- #check MeasureTheory.lintegral_prod_le
  -- https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Integral/Lebesgue/Basic.html#MeasureTheory.lintegral_const
  -- rw [MeasureTheory.Measure.volume_eq_prod]
  -- Fubini argument?
  sorry

/-- The set of `P ‚àà ùí´` with Lebesgue measure zero is of second category in `(ùí´, d)`. -/
theorem theorem_2_3 : ¬¨ IsMeagre P_zero_vol := by
  intro h
  exact thm2_5 (h.mono E_sub_P_zero_vol)

theorem Exists_P0 : P_zero_vol.Nonempty := by exact nonempty_of_not_IsMeagre theorem_2_3

theorem exists_besicovitch_set : ‚àÉ (B : Set (Fin 2 ‚Üí ‚Ñù)), IsBesicovitch B := by
  sorry

end

end

#exit

section

-- /-- In ‚Ñù, there exists a Kakeya set. -/
theorem one_dim_exists_kakeya : ‚àÉ s : Set ‚Ñù, IsKakeya s := ‚ü®closedBall (0 : ‚Ñù) 1, IsKakeya_ball‚ü©

-- /-- Any Kakeya set in `‚Ñù` contains a closed unit‚Äêlength interval. -/
-- lemma kakeya_contains_unit_Icc {K : Set ‚Ñù} (hK : IsKakeya K) :
--     ‚àÉ x‚ÇÄ, Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K := by
--   have := hK 1 (by simp)
--   -- simp only [segment_eq_Icc, norm_one] at this
--   rcases this with ‚ü®x‚ÇÄ, hseg‚ü©
--   exact ‚ü®x‚ÇÄ, by simpa using hseg‚ü©

-- /-- Any closed interval of length 1 has Hausdorff dimension 1. -/
-- lemma dimH_Icc_length_one (a : ‚Ñù) :
--     dimH (Icc a (a + 1)) = 1 := by
--   have h : (interior (Icc a (a + 1))).Nonempty := by simp [interior_Icc]
--   calc
--     dimH (Icc a (a + 1)) = Module.finrank ‚Ñù ‚Ñù := Real.dimH_of_nonempty_interior h
--     _ = 1 := by simp

-- /-- If a set contains some unit‚Äêinterval, then its dimH ‚â• 1. -/
-- lemma dimH_of_contains_Icc {K : Set ‚Ñù} {x‚ÇÄ} (h : Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K) :
--     1 ‚â§ dimH K := by
--   calc
--     1 = dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) := (dimH_Icc_length_one x‚ÇÄ).symm
--     _ ‚â§ dimH K := dimH_mono h

-- /-- Any subset of `‚Ñù` has dimH ‚â§ 1. -/
-- lemma dimH_le_one_univ : ‚àÄ (K : Set ‚Ñù), dimH K ‚â§ 1 := fun K ‚Ü¶ by
--   calc
--     dimH K ‚â§ dimH (univ : Set ‚Ñù) := dimH_mono (subset_univ _)
--     _ = Module.finrank ‚Ñù ‚Ñù := by simp [dimH_univ]
--     _ = 1 := by simp

-- /-- Any Kakeya set in `‚Ñù` has full Hausdorff dimension. -/
-- theorem dimH_kakeya_eq_one (K : Set ‚Ñù) (hK : IsKakeya K) :
--     dimH K = 1 := by
--   rcases kakeya_contains_unit_Icc hK with ‚ü®x‚ÇÄ, hsub‚ü©
--   exact le_antisymm (dimH_le_one_univ K) (dimH_of_contains_Icc hsub)

-- /-- Kakeya conjecture in ‚Ñù: there exists a Kakeya set of Hausdorff dimension 1. -/
-- theorem one_dim_kakeya_conjecture : ‚àÉ s : Set ‚Ñù, IsKakeya s ‚àß dimH s = 1 := by
--   refine ‚ü®closedBall (0 : ‚Ñù) 1, ‚ü®IsKakeya.ball, dimH_kakeya_eq_one _ IsKakeya.ball‚ü©‚ü©


/-- A Kakeya subset of ‚Ñù has full Hausdorff dimension. -/
theorem dimH_kakeya_eq_one (K : Set ‚Ñù)
  (hK : IsKakeya K) :
    dimH K = 1 := by
  rw [IsKakeya] at hK
  specialize hK 1
  simp only [norm_one, le_add_iff_nonneg_right, zero_le_one, segment_eq_Icc, forall_const] at hK
  rcases hK with ‚ü®x‚ÇÄ, hseg‚ü©
  have hIcc_sub : Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K := by
    simpa [segment_eq_Icc (by linarith : x‚ÇÄ ‚â§ x‚ÇÄ + 1)] using hseg
  have hlow : 1 ‚â§ dimH K := by
    have eq1 : dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) = 1 := by
      have nin : (interior (Icc x‚ÇÄ (x‚ÇÄ + 1))).Nonempty := by
        rw [interior_Icc]; simp
      calc
        dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) = Module.finrank ‚Ñù ‚Ñù := Real.dimH_of_nonempty_interior nin
        _ = 1 := by simp
    calc
      1 = dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) := eq1.symm
      _ ‚â§ dimH K := by apply dimH_mono; exact hseg
  have hup : dimH K ‚â§ 1 := by
    calc
      dimH K ‚â§ dimH (univ : Set ‚Ñù) := dimH_mono (subset_univ K)
      _ = Module.finrank ‚Ñù ‚Ñù := by simp only [Module.finrank_self, Nat.cast_one, dimH_univ]
      _ = 1 := by simp
  exact le_antisymm hup hlow

open ENNReal NNReal MeasureTheory Measure Filter Topology EMetric

/-@b-mehta's formulation of Prop 3.2 of Fox (needs to be PR by BM)-/
theorem asdf {X : Type*} [EMetricSpace X] [MeasurableSpace X] [BorelSpace X] {s : ‚Ñù} (hs : 0 ‚â§ s) (E : Set X) :
    ‚àÉ G : Set X, IsGŒ¥ G ‚àß E ‚äÜ G ‚àß ŒºH[s] G = ŒºH[s] E := by
  sorry

theorem dimH_eq_iInf {X : Type*}
  [EMetricSpace X] [MeasurableSpace X] [BorelSpace X]
  (s : Set X) :
    dimH s = ‚®Ö (d : ‚Ñù‚â•0) (_ : ŒºH[d] s = 0), (d : ‚Ñù‚â•0‚àû) := by
  borelize X
  rw [dimH_def]
  apply le_antisymm
  ¬∑ simp only [le_iInf_iff, iSup_le_iff, ENNReal.coe_le_coe]
    intro i hi j hj
    by_contra! hij
    simpa [hi, hj] using hausdorffMeasure_mono (le_of_lt hij) s
  ¬∑ by_contra! h
    rcases ENNReal.lt_iff_exists_nnreal_btwn.1 h with ‚ü®d', hdim_lt, hlt‚ü©
    have h0 : ŒºH[d'] s = 0 := by
      apply hausdorffMeasure_of_dimH_lt
      rw [dimH_def]
      exact hdim_lt
    have hle : (‚®Ö (d'' : ‚Ñù‚â•0) (_ : ŒºH[d''] s = 0), (d'' : ‚Ñù‚â•0‚àû)) ‚â§ (d' : ‚Ñù‚â•0‚àû) := by
      exact iInf‚ÇÇ_le d' h0
    exact lt_irrefl _ (hlt.trans_le hle)

/-- A subset of `‚Ñù‚Åø` has finite Hausdorff dimension. -/
theorem dimH_lt_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} :
    dimH A < ‚ä§ := by
  calc
    dimH A ‚â§ dimH (Set.univ : Set (Fin n ‚Üí ‚Ñù)) := dimH_mono (by simp)
    _ = n := dimH_univ_pi_fin n
    _ < ‚ä§ := by simp

theorem dimH_ne_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} : dimH A ‚â† ‚ä§ := by
  simpa using (lt_top_iff_ne_top).1 dimH_lt_top

/- Proposition 3.4 (Fox):
For any subset `A` of `‚Ñù‚Åø` there is a G‚ÇÄ‚Äêset `G` with `A ‚äÜ G` and `dimH G = dimH A`. -/
theorem exists_GŒ¥_of_dimH {n : ‚Ñï} (A : Set (Fin n ‚Üí ‚Ñù)) :
    ‚àÉ G : Set (Fin n ‚Üí ‚Ñù), IsGŒ¥ G ‚àß A ‚äÜ G ‚àß dimH G = dimH A := by
  observe dimHA_ne_top : dimH A ‚â† ‚ä§
  observe dimHA_nt_top : dimH A < ‚ä§
  generalize hA : dimH A = DA
  have : DA ‚â† ‚ä§ := Ne.symm (ne_of_ne_of_eq (id (Ne.symm dimHA_ne_top)) hA)
  lift DA to ‚Ñù‚â•0 using this
  obtain ‚ü®œÜ, h‚ÇÅœÜ, h‚ÇÇœÜ, h‚ÇÉœÜ‚ü© := exists_seq_strictAnti_tendsto' (show (0 : ‚Ñù‚â•0) < 1 by norm_num)
  have h‚ÇÑœÜ : Tendsto œÜ atTop (ùìù[>] 0) :=
    tendsto_nhdsWithin_mono_right
      (Set.range_subset_iff.2 (by simp_all)) (tendsto_nhdsWithin_range.2 h‚ÇÉœÜ)
  choose G' hG'_GŒ¥ subG' meas_eq' using
    fun k : ‚Ñï ‚Ü¶ asdf (coe_nonneg (DA + œÜ k)) A
  let G := ‚ãÇ k, G' k
  have iGŒ¥ : IsGŒ¥ G := IsGŒ¥.iInter fun k ‚Ü¶ hG'_GŒ¥ k
  have Asub : A ‚äÜ G := subset_iInter fun k ‚Ü¶ subG' k
  have hge : dimH A ‚â§ dimH G := dimH_mono Asub
  have hle : dimH G ‚â§ dimH A := dimH_le fun d' hd' ‚Ü¶ by
    by_contra! hgt
    have hd_pos : 0 < (d' : ‚Ñù‚â•0) - DA := by aesop
    rw [Metric.tendsto_atTop] at h‚ÇÉœÜ
    rcases h‚ÇÉœÜ _ hd_pos with ‚ü®k, hœÜk_lt‚ü©
    generalize hD : DA + œÜ k = D
    specialize h‚ÇÇœÜ k
    simp only [mem_Ioo] at h‚ÇÇœÜ
    cases' h‚ÇÇœÜ with hœÜk_gt_0 hœÜk_lt_1
    have hlt : DA < D := by
      linear_combination hD + hœÜk_gt_0
    have hŒºA : ŒºH[D] A = 0 := by
      apply hausdorffMeasure_of_dimH_lt
      rw [hA]
      norm_cast
    have hŒºGk : ŒºH[D] (G' k) = 0 := by
      rw [‚Üê hD, meas_eq', hD, hŒºA]
    have hmono : ŒºH[d'] G ‚â§ ŒºH[D] (G' k) := by
      calc
        ŒºH[d'] G ‚â§ ŒºH[d'] (G' k) := by
          apply measure_mono
          exact iInter_subset_of_subset k fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
        _ ‚â§ ŒºH[D] (G' k) := by
          apply hausdorffMeasure_mono
          apply le_of_lt
          rw [‚Üê hD]
          simp only [NNReal.coe_add]
          specialize hœÜk_lt k
          norm_cast
          simp only [ge_iff_le, le_refl, val_eq_coe, dist_lt_coe, nndist_zero_eq_val',
            forall_const] at hœÜk_lt
          rw [lt_tsub_iff_left] at hœÜk_lt
          exact hœÜk_lt
    have h0 : ŒºH[d'] G = 0 := by
      have hbot : ŒºH[d'] G ‚â§ 0 := by
        apply hmono.trans_eq
        exact hŒºGk
      exact le_bot_iff.1 hbot
    simp [h0] at hd'
  rw [‚Üê hA]
  exact ‚ü®G, iGŒ¥, Asub, le_antisymm hle hge‚ü©


/-- Proposition 3.7 (slicing): if `A ‚äÜ ‚Ñù‚Åø` has finite `s`-dimensional Hausdorff measure,
    then for any `k ‚â§ s` and any `k`-plane `W`, the slices
    `A ‚à© (W·óÆ + x)` have finite `(s - k)`-measure for `ŒºH[k]`-almost all `x ‚àà W`. -/
theorem prop_3_7_slicing
  (n : ‚Ñï)
  (A : Set (EuclideanSpace ‚Ñù (Fin n))) (hA : MeasurableSet A)
  (s : ‚Ñù) (hs : ŒºH[s] A < ‚ä§)
  (k : ‚Ñï) (hks : (k : ‚Ñù) ‚â§ s)
  (W : Submodule ‚Ñù (EuclideanSpace ‚Ñù (Fin n))) (hW : Module.finrank ‚Ñù W = k)
  (direction : W) (x : W) :
  ‚àÄ·µê x ‚àÇ (ŒºH[(k : ‚Ñù)]).restrict (W : Set (EuclideanSpace ‚Ñù (Fin n))),
    ŒºH[s - k] (A ‚à© (AffineSubspace.mk' x W.orthogonal : Set _)) < ‚ä§ := by
  sorry

section

/--
Besicovitch sets have Hausdorff dimension equal to 2.
-/
theorem hausdorff_dim_Besicovitch_eq_2 (B : Set (EuclideanSpace ‚Ñù (Fin 2))) (hB : IsBesicovitch B) :
    dimH B = 2 := by
  sorry

end

end

end Besicovitch

open Metric

-- Aaron Liu (Zulip)
theorem thing {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] {x y z : E} :
    hausdorffDist (segment ‚Ñù x z) (segment ‚Ñù y z) ‚â§ dist x y := by
  apply hausdorffDist_le_of_mem_dist
  ¬∑ apply dist_nonneg
  ¬∑ rintro _ ‚ü®b, c, hb, hc, hbc, rfl‚ü©
    refine ‚ü®b ‚Ä¢ y + c ‚Ä¢ z, ‚ü®b, c, hb, hc, hbc, rfl‚ü©, ?_‚ü©
    rw [dist_add_right]
    apply (dist_smul_le b x y).trans
    apply mul_le_of_le_one_left
    ¬∑ apply dist_nonneg
    ¬∑ rw [Real.norm_eq_abs, abs_of_nonneg hb]
      linarith
  ¬∑ rintro _ ‚ü®b, c, hb, hc, hbc, rfl‚ü©
    refine ‚ü®b ‚Ä¢ x + c ‚Ä¢ z, ‚ü®b, c, hb, hc, hbc, rfl‚ü©, ?_‚ü©
    rw [dist_add_right, dist_comm]
    apply (dist_smul_le b x y).trans
    apply mul_le_of_le_one_left
    ¬∑ apply dist_nonneg
    ¬∑ rw [Real.norm_eq_abs, abs_of_nonneg hb]
      linarith

open Set Real Topology Metric Bornology TopologicalSpace MeasureTheory MetricSpace Filter

namespace Minkowski

variable {Œ± : Type*} [PseudoMetricSpace Œ±]

open scoped BigOperators

/-- The set of all finite families of points whose closed r-balls cover `s`. -/
def coveringCandidates (s : Set Œ±) (r : ‚Ñù) : Set (Finset Œ±) :=
  {t | s ‚äÜ ‚ãÉ x ‚àà t, Metric.closedBall x r}

/-- Minimal number of closed `r`-balls to cover `s` (centres in `Œ±`), or `‚àû` if no finite cover. -/
noncomputable def coveringNumber (s : Set Œ±) (r : ‚Ñù) : WithTop ‚Ñï :=
  sInf { n : WithTop ‚Ñï | ‚àÉ t : Finset Œ±, (t.card : WithTop ‚Ñï) = n ‚àß s ‚äÜ ‚ãÉ x ‚àà t, Metric.closedBall x r }

lemma coveringNumber_mono_radius {s : Set Œ±} {r‚ÇÅ r‚ÇÇ : ‚Ñù}
    (h‚ÇÄ : 0 < r‚ÇÅ) (h : r‚ÇÅ ‚â§ r‚ÇÇ) :
      coveringNumber s r‚ÇÇ ‚â§ coveringNumber s r‚ÇÅ := by
  -- larger radius ‚áí need no more balls
  -- (prove by showing candidate sets transfer)
  dsimp only [coveringNumber]
  apply sInf_le_sInf_of_forall_exists_le
  rintro n ‚ü®t, rfl, hcov‚ü©
  have hcov‚ÇÇ : s ‚äÜ ‚ãÉ x ‚àà t, closedBall x r‚ÇÇ := by
    simp only [subset_def, mem_iUnion, exists_prop] at hcov
    intro a ha
    rcases hcov a ha with ‚ü®x, hx, hdist‚ü©
    sorry
  sorry

lemma coveringNumber_empty (r : ‚Ñù) : coveringNumber (‚àÖ : Set Œ±) r = 0 := by
   dsimp [coveringNumber]
   have h0 : (0 : WithTop ‚Ñï) ‚àà { n | ‚àÉ t : Finset Œ±, (t.card : WithTop ‚Ñï) = n ‚àß ‚àÖ ‚äÜ ‚ãÉ x ‚àà t, closedBall x r } := ‚ü®‚àÖ, by simp, by simp‚ü©
   sorry

lemma coveringNumber_singleton {x : Œ±} {r : ‚Ñù} (hr : 0 < r) :
    coveringNumber ({x} : Set Œ±) r = 1 := by
  sorry

-- lemma coveringNumber_eq_coe_nat
--   {s : Set Œ±} {r : ‚Ñù} (hfin : ‚àÉ t, s ‚äÜ ‚ãÉ x‚ààt, Metric.closedBall x r) :
--     ‚àÉ n : ‚Ñï, coveringNumber s r = n := by
--   sorry

open ENNReal Filter

noncomputable def N (s : Set Œ±) (r : ‚Ñù) : ‚Ñù‚â•0‚àû :=
  (coveringNumber s r).map (fun (n : ‚Ñï) ‚Ü¶ (n : ‚Ñù).toNNReal)


noncomputable def ballRatio (s : Set Œ±) (r : ‚Ñù) : ENNReal :=
  if N s r = ‚ä§ then ‚ä§ else
  (Real.log (N s r).toReal / (- Real.log r)).toNNReal

noncomputable def upperBoxDim (s : Set Œ±) : ‚Ñù‚â•0‚àû :=
  limsup (fun r ‚Ü¶ ballRatio s r) (ùìù[>] (0 : ‚Ñù))

-- noncomputable def upper_minkowski_dim (s : Set Œ±) : ‚Ñù :=
--   limsup (ùìù[>] (0 : ‚Ñù)) (fun r ‚Ü¶ if r > 0 then log ((N s r).toReal) / (- log r) else 0)

-- /-- Upper (box / Minkowski) dimension of a bounded (or totally bounded) set. -/
-- noncomputable def upper (s : Set Œ±) : ‚Ñù‚â•0‚àû :=

-- /-- Lower Minkowski dimension of a set. -/
-- noncomputable def lower (s : Set Œ±) : ‚Ñù‚â•0‚àû := sorry

-- /-- If upper = lower we speak of "the" Minkowski dimension. -/
-- noncomputable def dim (s : Set Œ±) : ‚Ñù‚â•0‚àû :=
--   if h : upper s = lower s then upper s else 0  -- or leave undefined


end Minkowski


/--
In a nonempty Baire space, a countable intersection of dense open sets is not meager.
-/
theorem not_meager_iInter_of_countable {Œ± : Type*} [TopologicalSpace Œ±] [BaireSpace Œ±] [Nonempty Œ±]
  {Œπ : Type*} [Countable Œπ] {U : Œπ ‚Üí Set Œ±} (hU_Open : ‚àÄ i, IsOpen (U i)) (hU_Dense : ‚àÄ i, Dense (U i)) :
  ¬¨ IsMeagre (‚ãÇ i, U i) := by
  intro hM
  have aux0 : Dense (‚ãÇ i, U i) := by
    apply dense_iInter_of_isOpen
    ¬∑ exact fun i ‚Ü¶ hU_Open i
    ¬∑ exact fun i ‚Ü¶ hU_Dense i
  -- A dense set in a nonempty space cannot be meager
  rw [IsMeagre] at hM
  rw [mem_residual] at hM
  rcases hM with ‚ü®t, ht, some, ye‚ü©

  -- rw [isMeagre_iff_countable_union_isNowhereDense] at hM

  -- rw [IsMeagre, mem_residual_iff] at hM
  -- rcases hM with ‚ü®S, hS_open, hS_dense, hS_countable, hS_sub‚ü©
  sorry



/-- A countable intersection of residual sets is residual. -/
theorem residual.countable_sInter  {X : Type*} [TopologicalSpace X] {S : Set (Set X)} (hS : S.Countable) (h : ‚àÄ s ‚àà S, s ‚àà residual X) :
    (‚ãÇ‚ÇÄ S) ‚àà residual X := by
  rw [countable_sInter_mem]
  ¬∑ exact fun s a ‚Ü¶ h s a
  ¬∑ exact hS

/-- In a nonempty Baire space, any dense `GŒ¥` set is not meagre. -/
theorem IsGŒ¥_dense_not_meagre {X : Type*} [TopologicalSpace X] [BaireSpace X] [Nonempty X] {s : Set X} (hs : IsGŒ¥ s) (hd : Dense s) :
    ¬¨ IsMeagre s := by
  intro h
  rcases (mem_residual).1 h with ‚ü®t, ht_subset, htGŒ¥, htd‚ü©
  have hdense : Dense (s ‚à© t) := (Dense.inter_of_GŒ¥ hs htGŒ¥ hd htd)
  have hstempty : s ‚à© t = (‚àÖ : Set X) := by
     apply eq_empty_iff_forall_notMem.mpr
     intro x hx
     have : x ‚àà s·∂ú := ht_subset hx.2
     have : x ‚àâ s := by simpa using this
     exact this hx.1
  have : (s ‚à© t).Nonempty := hdense.nonempty
  simpa [hstempty]

variable {X : Type*} [PseudoMetricSpace X] [CompleteSpace X] [Nonempty X]

-- U : Œπ ‚Üí Set X is a countable family of dense open sets
lemma nonempty_iInter_of_dense_open'
    {Œπ : Type*} [Countable Œπ] (U : Œπ ‚Üí Set X)
    (hUo : ‚àÄ i, IsOpen (U i)) (hUd : ‚àÄ i, Dense (U i)) :
    (‚ãÇ i, U i).Nonempty := by
  simpa [Set.univ_inter] using
    (dense_iff_inter_open.1 (dense_iInter_of_isOpen (f := U) hUo hUd))
      Set.univ isOpen_univ (by exact nonempty_iff_univ_nonempty.mp (by infer_instance))
