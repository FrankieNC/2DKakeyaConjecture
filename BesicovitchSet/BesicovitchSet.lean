/-
Copyright (c) 2025 Yes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Francesco Nishanil Chotuck, Yuming Guo, Bhavik Mehta
-/

import Mathlib

namespace Besicovitch

open Set Real Topology Metric Bornology TopologicalSpace MeasureTheory MetricSpace

-- Formalise the entirety of Section 2. Section 4 is nonsense

section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-- A subset of a normed real vector space `E` is Kakeya if it contains a segment of unit length in
every direction. -/
def IsKakeya {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] (s : Set E) : Prop :=
    ‚àÄ v : E, ‚Äñv‚Äñ = 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s

/-- The universal set is Kakeya. -/
lemma univ_isKakeya : IsKakeya (Set.univ : Set E) := by simp [IsKakeya]

/-- If `s` is Kakeya and `s ‚äÜ t`, then `t` is Kakeya. -/
theorem IsKakeya.subset {s t : Set E} (h : IsKakeya s) (hs : s ‚äÜ t) : IsKakeya t := by
  intro v hv
  rcases h v hv with ‚ü®x, hx‚ü©
  exact ‚ü®x, hx.trans hs‚ü©

/-- The closed unit ball is Kakeya. -/
theorem IsKakeya.ball : IsKakeya (closedBall (0 : E) 1) := by
  intro v hv
  use -v
  intro y hy
  calc
    dist y 0 = ‚Äñy - 0‚Äñ := by simp
    _ ‚â§ ‚Äñ(-v) - 0‚Äñ := by
      apply norm_sub_le_of_mem_segment
      simp only [neg_add_cancel] at hy
      rw [segment_symm]
      exact hy
    _ = ‚Äñv‚Äñ := by simp
    _ = 1 := hv

/-- In a nontrivial normed space, any Kakeya set is nonempty. -/
theorem IsKakeya.nonempty [Nontrivial E] {s : Set E} (h : IsKakeya s) : s.Nonempty := by
  obtain ‚ü®v, hv_norm‚ü© := exists_norm_eq E zero_le_one
  rcases h v hv_norm with ‚ü®y, hy‚ü©
  exact ‚ü®y, hy (left_mem_segment ..)‚ü©

/--
A reformulation of the Kakeya condition: it suffices to check the existence of
a segment for all vectors with norm at most 1, rather than exactly 1.
-/
theorem isKakeya_iff_sub_unit [Nontrivial E] {s : Set E} :
    IsKakeya s ‚Üî ‚àÄ v : E, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x : E, segment ‚Ñù x (x + v) ‚äÜ s := by
  constructor
  -- First, prove: IsKakeya s ‚Üí ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ‚àÉ x, segment x x+v ‚äÜ s
  ¬∑ intro h_kakeya v hv

    -- Case: v = 0
    by_cases h‚ÇÄ : v = 0
    ¬∑ simpa [h‚ÇÄ] using h_kakeya.nonempty

    -- Case: v ‚â† 0
    ¬∑ set u := ‚Äñv‚Äñ‚Åª¬π ‚Ä¢ v with hu -- rescale v to a unit vector u
      have h‚ÇÅ : ‚Äñv‚Äñ ‚â† 0 := by
        contrapose! h‚ÇÄ
        rw [norm_eq_zero] at h‚ÇÄ
        exact h‚ÇÄ
      -- Now u has norm 1
      have h‚ÇÇ : ‚Äñu‚Äñ = 1 := by field_simp [hu, norm_smul]
      -- By IsKakeya, s contains segment in direction u
      obtain ‚ü®x, hx‚ü© := h_kakeya u h‚ÇÇ
      use x
      -- We want to show: segment x x+v ‚äÜ segment x x+u
      -- Since v is a scalar multiple of u, both segments lie along same ray
      have h‚ÇÉ : segment ‚Ñù x (x + v) ‚äÜ segment ‚Ñù x (x + u) := by
        apply (convex_segment _ _).segment_subset (left_mem_segment _ _ _)
        rw [segment_eq_image']
        exact ‚ü®‚Äñv‚Äñ, by simp [*]‚ü©
      -- Apply inclusion of segments to conclude result
      exact h‚ÇÉ.trans hx
  -- Converse: ‚àÄ v, ‚Äñv‚Äñ ‚â§ 1 ‚Üí ... ‚áí IsKakeya s
  ¬∑ intro h_segment v hv
    exact h_segment v hv.le

/--
A Besicovitch set in `‚Ñù‚Åø` is a Kakeya set of Lebesgue measure zero.
-/
def IsBesicovitch {n : ‚Ñï} (s : Set (Fin n ‚Üí ‚Ñù)) : Prop := IsKakeya s ‚àß volume s = 0

theorem dimH_segment_eq_one (x y : E) (h : x ‚â† y) :
    dimH (segment ‚Ñù x y) = 1 := by
  sorry

end

section

/-- The rectangle [-1,1] √ó [0,1] -/
def rectangle : Set (‚Ñù √ó ‚Ñù) := Icc (-1) 1 √óÀ¢ Icc 0 1

/-- The segment from (x‚ÇÅ, 0) to (x‚ÇÇ, 1). -/
def segment01 (x‚ÇÅ x‚ÇÇ : ‚Ñù) : Set (‚Ñù √ó ‚Ñù) :=
  segment ‚Ñù (x‚ÇÅ, 0) (x‚ÇÇ, 1)

-- Collection ùí´ of subsets P ‚äÜ [-1,1] √ó [0,1] satisfying (i) and (ii)
def P_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
  { P | IsClosed P ‚àß P ‚äÜ rectangle ‚àß
    -- (i) P is a union of line segments from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
    (‚àÉ A : Set (‚Ñù √ó ‚Ñù), A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 ‚àß
      P = ‚ãÉ (p ‚àà A), segment01 p.1 p.2) ‚àß
    -- (ii) for all v with |v| ‚â§ 1/2, there exists x‚ÇÅ, x‚ÇÇ ‚àà [-1,1] with x‚ÇÇ - x‚ÇÅ = v and segment ‚äÜ P
    (‚àÄ v : ‚Ñù, |v| ‚â§ 1/2 ‚Üí ‚àÉ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1
        ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

-- Define ùí¶ as the collection of non-empty compact subsets of ‚Ñù¬≤
def P_collection' : Set (NonemptyCompacts (‚Ñù √ó ‚Ñù)) :=
  { P | IsClosed (P : Set (‚Ñù √ó ‚Ñù)) ‚àß (P : Set (‚Ñù √ó ‚Ñù)) ‚äÜ rectangle ‚àß
    -- (i) P is a union of line segments from (x‚ÇÅ, 0) to (x‚ÇÇ, 1)
    (‚àÉ A : Set (‚Ñù √ó ‚Ñù), A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 ‚àß
      P = ‚ãÉ (p ‚àà A), segment01 p.1 p.2) ‚àß
    -- (ii) for all v with |v| ‚â§ 1/2, there exists x‚ÇÅ, x‚ÇÇ ‚àà [-1,1] with x‚ÇÇ - x‚ÇÅ = v and segment ‚äÜ P
    (‚àÄ v : ‚Ñù, |v| ‚â§ 1/2 ‚Üí ‚àÉ (x‚ÇÅ x‚ÇÇ : ‚Ñù), x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1
        ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ P) }

theorem P_is_bounded {P : NonemptyCompacts (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection') :
    IsBounded (P : Set (‚Ñù √ó ‚Ñù)) := by
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
  rw [isBounded_iff]
  use 10
  intro x hx y hy
  have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
  have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
  have hx_bound : |x.1 - y.1| ‚â§ 2 := by
    calc
      |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
      _ ‚â§ 1 + 1 := by
        have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
        have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
        (expose_names; exact add_le_add this_1 this)
      _ ‚â§ 2 := by norm_num
  have hy_bound : |x.2 - y.2| ‚â§ 2 := by
    sorry
  calc
    dist x y = ‚Äñx - y‚Äñ := rfl
    _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
    _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
    _ ‚â§ 10 := by norm_num

/-- The carrier image of `P_collection'` recovers the original set-level collection `P_collection`. -/
theorem P_collection'_image_eq : (‚Üë) '' P_collection' = P_collection := by
  ext P
  constructor
  ¬∑ rintro ‚ü®Q, hQ, rfl‚ü©
    exact hQ
  ¬∑ intro hP
    have h_compact : IsCompact P := by
      rw [isCompact_iff_isClosed_bounded]
      obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
      constructor
      ¬∑ exact h‚ÇÅ
      ¬∑ rw [isBounded_iff]
        use 10
        intro x hx y hy
        have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
        have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
        have hx_bound : |x.1 - y.1| ‚â§ 2 := by
          calc
            |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
            _ ‚â§ 1 + 1 := by
              have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
              have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
              (expose_names; exact add_le_add this_1 this)
            _ = 2 := by norm_num
        have hy_bound : |x.2 - y.2| ‚â§ 2 := by
          calc
            |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
            _ ‚â§ 1 + 1 := by
              apply add_le_add
              ¬∑ apply abs_le.2
                constructor -- From here on it is all Yuming
                ¬∑ have : 0 ‚â§ x.2 := by aesop
                  have : (-1 : ‚Ñù) ‚â§ 0 := by norm_num
                  expose_names; exact le_trans this this_1
                ¬∑ aesop
              ¬∑ apply abs_le.2
                constructor
                ¬∑ have : 0 ‚â§ y.2 := by aesop
                  have : (-1 : ‚Ñù) ‚â§ 0 := by norm_num
                  expose_names; exact le_trans this this_1
                ¬∑ aesop
            _ = 2 := by norm_num
        calc
          dist x y = ‚Äñx - y‚Äñ := rfl
          _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
          _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
          _ ‚â§ 10 := by norm_num
    have h_nonempty : P.Nonempty := by
      have h_seg_exists : ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P := by
        obtain ‚ü®_, _, _, h‚ü© := hP
        specialize h 0 (by norm_num)
        obtain ‚ü®x‚ÇÅ, x‚ÇÇ, h‚ÇÅ, _, h‚ÇÇ‚ü© := h
        have : x‚ÇÅ = x‚ÇÇ := by linarith [h‚ÇÇ]
        subst this
        obtain ‚ü®_, h‚ÇÇ‚ü© := h‚ÇÇ
        exact ‚ü®x‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©
      rcases h_seg_exists with ‚ü®x, hx, h_seg‚ü©
      use (x, 0)
      exact h_seg (left_mem_segment ‚Ñù (x, 0) (x, 1))
    simp only [mem_image]
    let Q : NonemptyCompacts (‚Ñù √ó ‚Ñù) := ‚ü®‚ü®P, h_compact‚ü©, h_nonempty‚ü©
    use Q
    exact ‚ü®hP, rfl‚ü©

-- -- Define ùí¶ as the collection of non-empty compact subsets of ‚Ñù¬≤
-- def K_collection : Set (Set (‚Ñù √ó ‚Ñù)) :=
--   { K | K.Nonempty ‚àß IsCompact K }

-- lemma P_isNonempty {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
--     ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P := by
--   -- BM: I broke this because I changed P_collection to be more correct
--   obtain ‚ü®_, _, _, h‚ü© := hP
--   specialize h 0 (by norm_num)
--   obtain ‚ü®x‚ÇÅ, x‚ÇÇ, hx‚ÇÅ, hx‚ÇÇ, h_diff, h_seg‚ü© := h
--   have : x‚ÇÅ = x‚ÇÇ := by linarith [h_diff]
--   subst this
--   exact ‚ü®x‚ÇÅ, hx‚ÇÅ, h_seg‚ü©
  -- exact Filter.frequently_principal.mp fun a ‚Ü¶ a hx‚ÇÅ h_seg

-- lemma exists_mem_P {P : Set (‚Ñù √ó ‚Ñù)}
--   (h : ‚àÉ x ‚àà Icc (-1 : ‚Ñù) 1, segment01 x x ‚äÜ P) :
--     ‚àÉ p, p ‚àà P := by
--   rcases h with ‚ü®x, hx, hseg‚ü©
--   have h_left : (x, 0) ‚àà segment01 x x := by
--     dsimp [segment01]
--     exact left_mem_segment ‚Ñù (x, 0) (x, 1)
--   exact ‚ü®(x, 0), hseg h_left‚ü©

-- BM: I'd phrase this as P_collection ‚äÜ K_collection
-- lemma P_collection_in_K_collection {P : Set (‚Ñù √ó ‚Ñù)} (hP : P ‚àà P_collection) :
--     P ‚àà K_collection := by
--   -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--   have h_nonempty : P.Nonempty := by
--     rcases P_isNonempty hP with ‚ü®x, hx, hseg‚ü©
--     refine ‚ü®(x, 0), hseg (left_mem_segment ‚Ñù (x, 0) (x, 1))‚ü©
--   have h_compact : IsCompact P := by
--     rw [isCompact_iff_isClosed_bounded]
--     -- BM: I broke this because I changed P_collection to be more correct
--     obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
--     -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--     constructor
--     ¬∑ exact h‚ÇÅ
--     ¬∑ rw [isBounded_iff]
--       use 10
--       intro x hx y hy
--       have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
--       have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
--       have hx_bound : |x.1 - y.1| ‚â§ 2 := by
--         calc
--           |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
--           _ ‚â§ 1 + 1 := by
--             have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
--             have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
--             (expose_names; exact add_le_add this_1 this)
--           _ = 2 := by norm_num
--       have hy_bound : |x.2 - y.2| ‚â§ 2 := by
--         calc
--           |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
--           _ ‚â§ 1 + 1 := by
--             exact add_le_add
--               (abs_le.2 ‚ü®by linarith [hfx2.1], hfx2.2‚ü©)
--               (abs_le.2 ‚ü®by linarith [hfy2.1], hfy2.2‚ü©)
--           _ = 2 := by norm_num
--       calc
--         dist x y = ‚Äñx - y‚Äñ := rfl
--         _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
--         _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
--         _ ‚â§ 10 := by norm_num
--   rw [K_collection]
--   exact mem_sep h_nonempty h_compact

-- lemma P_collection_sub_K_collection :
--     P_collection ‚äÜ K_collection := by
--   intro P hP
--   -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--   have h_nonempty : P.Nonempty := by
--     rcases P_isNonempty hP with ‚ü®x, hx, hseg‚ü©
--     refine ‚ü®(x, 0), hseg (left_mem_segment ‚Ñù (x, 0) (x, 1))‚ü©
--   have h_compact : IsCompact P := by
--     rw [isCompact_iff_isClosed_bounded]
--     -- BM: I broke this because I changed P_collection to be more correct
--     obtain ‚ü®h‚ÇÅ, h‚ÇÇ, _‚ü© := hP
--     -- obtain ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ, ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, ‚ü®h‚ÇÖa, h‚ÇÖb‚ü©‚ü©‚ü©‚ü©‚ü© := hP
--     constructor
--     ¬∑ exact h‚ÇÅ
--     ¬∑ rw [isBounded_iff]
--       use 10
--       intro x hx y hy
--       have ‚ü®hfx1, hfx2‚ü© := h‚ÇÇ hx
--       have ‚ü®hfy1, hfy2‚ü© := h‚ÇÇ hy
--       have hx_bound : |x.1 - y.1| ‚â§ 2 := by
--         calc
--           |x.1 - y.1| ‚â§ |x.1| + |y.1| := abs_sub x.1 y.1
--           _ ‚â§ 1 + 1 := by
--             have : |x.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfx1)
--             have : |y.1| ‚â§ 1 := abs_le.2 (mem_Icc.1 hfy1)
--             (expose_names; exact add_le_add this_1 this)
--           _ = 2 := by norm_num
--       have hy_bound : |x.2 - y.2| ‚â§ 2 := by
--         calc
--           |x.2 - y.2| ‚â§ |x.2| + |y.2| := abs_sub x.2 y.2
--           _ ‚â§ 1 + 1 := by
--             exact add_le_add
--               (abs_le.2 ‚ü®by linarith [hfx2.1], hfx2.2‚ü©)
--               (abs_le.2 ‚ü®by linarith [hfy2.1], hfy2.2‚ü©)
--           _ = 2 := by norm_num
--       calc
--         dist x y = ‚Äñx - y‚Äñ := rfl
--         _ ‚â§ |(x - y).1| + |(x - y).2| := by aesop
--         _ ‚â§ 2 + 2 := add_le_add hx_bound hy_bound
--         _ ‚â§ 10 := by norm_num
--   exact mem_sep h_nonempty h_compact

open Filter

-- attribute [-instance] Scott.topologicalSpace

theorem ùìü_IsClosed : IsClosed P_collection' := by
  rw [‚Üê isSeqClosed_iff_isClosed, IsSeqClosed]
  intro P‚Çô K h_mem h_lim
  have h_closed : IsClosed (K : Set (‚Ñù √ó ‚Ñù)) := (K.toCompacts.isCompact).isClosed
  obtain ‚ü®k, hk_in_K‚ü© := K.nonempty
  rw [Metric.tendsto_atTop] at h_lim
  simp only [Metric.NonemptyCompacts.dist_eq] at h_lim
  have hPn_bdd (n : ‚Ñï) : IsBounded (P‚Çô n : Set (‚Ñù √ó ‚Ñù)) := P_is_bounded (h_mem n)
  have hK_bdd : IsBounded (K : Set (‚Ñù √ó ‚Ñù)) := (K.toCompacts.isCompact).isBounded
  have fin_dist (n : ‚Ñï) : EMetric.hausdorffEdist (P‚Çô n) (K : Set (‚Ñù √ó ‚Ñù)) ‚â† ‚ä§ := by
    apply Metric.hausdorffEdist_ne_top_of_nonempty_of_bounded
    exact NonemptyCompacts.nonempty (P‚Çô n)
    ¬∑ exact NonemptyCompacts.nonempty K
    ¬∑ exact hPn_bdd n
    ¬∑ exact hK_bdd
  have h_haus (n : ‚Ñï) : hausdorffDist (K : Set (‚Ñù √ó ‚Ñù)) (P‚Çô n : Set (‚Ñù √ó ‚Ñù)) < (1 : ‚Ñù)/(n+1) := by
    rcases h_lim (1/(n+1)) (by positivity) with ‚ü®N, hN‚ü©
    sorry
    -- have : hausdorffDist (P‚Çô n) K < 1/(n+1) := by
      -- sorry
    -- hN n (le_refl _)
    -- simpa [Metric.hausdorffDist_comm] using this
  choose p‚Çô hp‚Çô_mem hp‚Çô_lt using fun n ‚Ü¶
    Metric.exists_dist_lt_of_hausdorffDist_lt
      (x := k) (s := K) (t := P‚Çô n) (r := (1 : ‚Ñù) / (n + 1))
      hk_in_K
      (h_haus n)
      (by simpa [EMetric.hausdorffEdist_comm] using fin_dist n)
      -- (by
      -- rcases h_lim (1 / ((n : ‚Ñï) + 1)) (by positivity) with ‚ü®N, hN‚ü©
      -- have : ‚àÄ (n : ‚Ñï), hausdorffDist K (P‚Çô n) < 1 / (n + 1)) := hN n (le_refl)
      -- simpa [Metric.hausdorffDist_comm] using sorry)
      -- (by
        -- have hfin : EMetric.hausdorffEdist (P‚Çô n) (K : Set _) ‚â† ‚ä§ := fin_dist n
        -- simpa [EMetric.hausdorffEdist_comm] using hfin)
  -- choose p‚Çô hp‚Çô_mem hp‚Çô_lt using fun n ‚Ü¶
  --   Metric.exists_dist_lt_of_hausdorffDist_lt hk_in_K

  -- Hmm, this may not be correct, investigate further
  have h_sub : (K : Set _) ‚äÜ rectangle := by
    have hP_sub : ‚àÄ n, (P‚Çô n : Set _) ‚äÜ rectangle := by
      intro n
      specialize h_mem n
      obtain ‚ü®_, ‚ü®h‚ü©‚ü© := h_mem
      exact h
    sorry
  have h_union : ‚àÉ A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1, ‚ÜëK = ‚ãÉ p ‚àà A, segment01 p.1 p.2 := by
    sorry
  have h_forall : ‚àÄ (v : ‚Ñù), |v| ‚â§ 1 / 2 ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ,
      x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ ‚ÜëK := by
    intro v hv

    sorry
  rw [P_collection']
  exact ‚ü®h_closed, h_sub, h_union, h_forall‚ü©

  --   let A : Set (‚Ñù √ó ‚Ñù) :=
  --   { p | p.1 ‚àà Icc (-1 : ‚Ñù) 1
  --        ‚àß p.2 ‚àà Icc (-1 : ‚Ñù) 1
  --        ‚àß segment01 p.1 p.2 ‚äÜ (K : _) }
  --   use A
  --   have hA : A ‚äÜ Icc (-1) 1 √óÀ¢ Icc (-1) 1 := by
  --     simp only [Icc_prod_Icc, subset_def, and_assoc]
  --     intro a ha
  --     aesop
  --   refine ‚ü®hA, ext fun x ‚Ü¶ by
  --     constructor
  --     ¬∑ intro hxK
  --       sorry
  --     ¬∑ intro hx
  --       sorry
  --       ‚ü©
  -- have h_forall : ‚àÄ (v : ‚Ñù), |v| ‚â§ 1 / 2 ‚Üí ‚àÉ x‚ÇÅ x‚ÇÇ,
  --     x‚ÇÅ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ ‚àà Icc (-1) 1 ‚àß x‚ÇÇ - x‚ÇÅ = v ‚àß segment01 x‚ÇÅ x‚ÇÇ ‚äÜ ‚ÜëK := by
  --   intro v hv
  --   use 0, 0
  --   constructor
  --   ¬∑ simp
  --   ¬∑ constructor
  --     ¬∑ simp
  --     ¬∑ constructor
  --       ¬∑ simp only [sub_self]
  --         sorry
  --       ¬∑ sorry
  -- have h_rect_closed : IsClosed rectangle :=
  --   isClosed_Icc.prod isClosed_Icc
  -- have h_sub : (K : Set _) ‚äÜ rectangle := by
  --   have h_in : ‚àÄ n, F n ‚àà {t | t ‚äÜ rectangle} := fun n ‚Ü¶ (h_mem n).2.1
  --   sorry
  -- dsimp [P_collection'] at *
  -- exact ‚ü®h_closed, h_sub, h_union, h_forall‚ü©

-- Lemma 2.4 goes here

/-- In ‚Ñù, there exists a Kakeya set. -/
theorem one_dim_exists_kakeya : ‚àÉ s : Set ‚Ñù, IsKakeya s := ‚ü®closedBall (0 : ‚Ñù) 1, IsKakeya.ball‚ü©

/-- Any Kakeya set in `‚Ñù` contains a closed unit‚Äêlength interval. -/
lemma kakeya_contains_unit_Icc {K : Set ‚Ñù} (hK : IsKakeya K) :
    ‚àÉ x‚ÇÄ, Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K := by
  have := hK 1 (by simp)
  -- simp only [segment_eq_Icc, norm_one] at this
  rcases this with ‚ü®x‚ÇÄ, hseg‚ü©
  exact ‚ü®x‚ÇÄ, by simpa using hseg‚ü©

/-- Any closed interval of length 1 has Hausdorff dimension 1. -/
lemma dimH_Icc_length_one (a : ‚Ñù) :
    dimH (Icc a (a + 1)) = 1 := by
  have h : (interior (Icc a (a + 1))).Nonempty := by simp [interior_Icc]
  calc
    dimH (Icc a (a + 1)) = Module.finrank ‚Ñù ‚Ñù := Real.dimH_of_nonempty_interior h
    _ = 1 := by simp

/-- If a set contains some unit‚Äêinterval, then its dimH ‚â• 1. -/
lemma dimH_of_contains_Icc {K : Set ‚Ñù} {x‚ÇÄ} (h : Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K) :
    1 ‚â§ dimH K := by
  calc
    1 = dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) := (dimH_Icc_length_one x‚ÇÄ).symm
    _ ‚â§ dimH K := dimH_mono h

/-- Any subset of `‚Ñù` has dimH ‚â§ 1. -/
lemma dimH_le_one_univ : ‚àÄ (K : Set ‚Ñù), dimH K ‚â§ 1 := fun K ‚Ü¶ by
  calc
    dimH K ‚â§ dimH (univ : Set ‚Ñù) := dimH_mono (subset_univ _)
    _ = Module.finrank ‚Ñù ‚Ñù := by simp [dimH_univ]
    _ = 1 := by simp

/-- Any Kakeya set in `‚Ñù` has full Hausdorff dimension. -/
theorem dimH_kakeya_eq_one (K : Set ‚Ñù) (hK : IsKakeya K) :
    dimH K = 1 := by
  rcases kakeya_contains_unit_Icc hK with ‚ü®x‚ÇÄ, hsub‚ü©
  exact le_antisymm (dimH_le_one_univ K) (dimH_of_contains_Icc hsub)

/-- Kakeya conjecture in ‚Ñù: there exists a Kakeya set of Hausdorff dimension 1. -/
theorem one_dim_kakeya_conjecture : ‚àÉ s : Set ‚Ñù, IsKakeya s ‚àß dimH s = 1 := by
  refine ‚ü®closedBall (0 : ‚Ñù) 1, ‚ü®IsKakeya.ball, dimH_kakeya_eq_one _ IsKakeya.ball‚ü©‚ü©


-- /-- A Kakeya subset of ‚Ñù has full Hausdorff dimension. -/
-- theorem dimH_kakeya_eq_one (K : Set ‚Ñù)
--   (hK : IsKakeya K) :
--     dimH K = 1 := by
--   rw [IsKakeya] at hK
--   specialize hK 1
--   simp only [norm_one, le_add_iff_nonneg_right, zero_le_one, segment_eq_Icc, forall_const] at hK
--   rcases hK with ‚ü®x‚ÇÄ, hseg‚ü©
--   have hIcc_sub : Icc x‚ÇÄ (x‚ÇÄ + 1) ‚äÜ K := by
--     simpa [segment_eq_Icc (by linarith : x‚ÇÄ ‚â§ x‚ÇÄ + 1)] using hseg
--   have hlow : 1 ‚â§ dimH K := by
--     have eq1 : dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) = 1 := by
--       have nin : (interior (Icc x‚ÇÄ (x‚ÇÄ + 1))).Nonempty := by
--         rw [interior_Icc]; simp
--       calc
--         dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) = Module.finrank ‚Ñù ‚Ñù := Real.dimH_of_nonempty_interior nin
--         _ = 1 := by simp
--     calc
--       1 = dimH (Icc x‚ÇÄ (x‚ÇÄ + 1)) := eq1.symm
--       _ ‚â§ dimH K := by apply dimH_mono; exact hseg
--   have hup : dimH K ‚â§ 1 := by
--     calc
--       dimH K ‚â§ dimH (univ : Set ‚Ñù) := dimH_mono (subset_univ K)
--       _ = Module.finrank ‚Ñù ‚Ñù := by simp only [Module.finrank_self, Nat.cast_one, dimH_univ]
--       _ = 1 := by simp
--   apply le_antisymm
--   ¬∑ exact hup
--   ¬∑ exact hlow

open ENNReal NNReal MeasureTheory Measure Filter Topology EMetric

/-@b-mehta's formulation of Prop 3.2 of Fox (needs to be PR by BM)-/
theorem asdf {X : Type*} [EMetricSpace X] [MeasurableSpace X] [BorelSpace X] {s : ‚Ñù} (hs : 0 ‚â§ s) (E : Set X) :
    ‚àÉ G : Set X, IsGŒ¥ G ‚àß E ‚äÜ G ‚àß ŒºH[s] G = ŒºH[s] E := by
  sorry

theorem dimH_eq_iInf {X : Type*}
  [EMetricSpace X] [MeasurableSpace X] [BorelSpace X]
  (s : Set X) :
    dimH s = ‚®Ö (d : ‚Ñù‚â•0) (_ : ŒºH[d] s = 0), (d : ‚Ñù‚â•0‚àû) := by
  borelize X
  rw [dimH_def]
  apply le_antisymm
  ¬∑ simp only [le_iInf_iff, iSup_le_iff, ENNReal.coe_le_coe]
    intro i hi j hj
    by_contra! hij
    simpa [hi, hj] using hausdorffMeasure_mono (le_of_lt hij) s
  ¬∑ by_contra! h
    rcases ENNReal.lt_iff_exists_nnreal_btwn.1 h with ‚ü®d', hdim_lt, hlt‚ü©
    have h0 : ŒºH[d'] s = 0 := by
      apply hausdorffMeasure_of_dimH_lt
      rw [dimH_def]
      exact hdim_lt
    have hle : (‚®Ö (d'' : ‚Ñù‚â•0) (_ : ŒºH[d''] s = 0), (d'' : ‚Ñù‚â•0‚àû)) ‚â§ (d' : ‚Ñù‚â•0‚àû) := by
      exact iInf‚ÇÇ_le d' h0
    exact lt_irrefl _ (hlt.trans_le hle)

/-- A subset of `‚Ñù‚Åø` has finite Hausdorff dimension. -/
theorem dimH_lt_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} :
    dimH A < ‚ä§ := by
  calc
    dimH A ‚â§ dimH (Set.univ : Set (Fin n ‚Üí ‚Ñù)) := dimH_mono (by simp)
    _ = n := dimH_univ_pi_fin n
    _ < ‚ä§ := by simp

theorem dimH_ne_top {n : ‚Ñï} {A : Set (Fin n ‚Üí ‚Ñù)} : dimH A ‚â† ‚ä§ := by
  simpa using (lt_top_iff_ne_top).1 dimH_lt_top

/-- Proposition 3.4 (Fox):
For any subset `A` of `‚Ñù‚Åø` there is a G‚ÇÄ‚Äêset `G` with `A ‚äÜ G` and `dimH G = dimH A`. -/
-- theorem exists_GŒ¥_of_dimH {n : ‚Ñï} (A : Set (Fin n ‚Üí ‚Ñù)) :
--     ‚àÉ G : Set (Fin n ‚Üí ‚Ñù), IsGŒ¥ G ‚àß A ‚äÜ G ‚àß dimH G = dimH A := by
--   -- set s := dimH A with hs
--   -- have hs_nonneg : 0 ‚â§ dimH A := by positivity
--   obtain ‚ü®œÜ, h‚ÇÅœÜ, h‚ÇÇœÜ, h‚ÇÉœÜ‚ü© := exists_seq_strictAnti_tendsto' (show (0 : ‚Ñù‚â•0‚àû) < 1 by norm_num)
--   have h‚ÇÑœÜ : Tendsto œÜ atTop (ùìù[>] 0) :=
--     tendsto_nhdsWithin_mono_right
--       (Set.range_subset_iff.2 (by simp_all)) (tendsto_nhdsWithin_range.2 h‚ÇÉœÜ)
--   choose G' hG'_GŒ¥ subG' meas_eq' using
--     fun k : ‚Ñï ‚Ü¶
--       have : (0 : ‚Ñù) ‚â§ (dimH A + œÜ k).toReal := by positivity
--       asdf this A
--   let G := ‚ãÇ k, G' k
--   have iGŒ¥ : IsGŒ¥ G := IsGŒ¥.iInter fun k ‚Ü¶ hG'_GŒ¥ k
--   have Asub : A ‚äÜ G := subset_iInter fun k ‚Ü¶ subG' k
--   have hge : dimH A ‚â§ dimH G := dimH_mono Asub
--   have hle : dimH G ‚â§ dimH A := by
--     rw [‚Üê forall_gt_iff_le]
--     intro t ht
--     have hpos : 0 < (t - dimH A) := by simpa
--     rw [ENNReal.tendsto_atTop_zero] at h‚ÇÉœÜ
--     rcases (h‚ÇÉœÜ _ hpos) with ‚ü®k, hœÜk‚ü©
--     set d := (dimH A + œÜ k) with hd
--     have h‚ÇÖœÜ: 0 < œÜ k := by sorry
--     have hlt : dimH A < d.toNNReal := sorry --by simpa [hd] using lt_add_iff_pos_right.2 h‚ÇÖœÜ
--     have hŒºA‚ÇÄ : ŒºH[d.toReal] A = 0 := hausdorffMeasure_of_dimH_lt hlt
--     have hŒºA : ŒºH[d.toReal] (G' k) = 0 := -- (meas_eq' k).trans hŒºA‚ÇÄ
--       sorry
--       -- simpa [hd] using lt_add_iff_pos_right.2 h‚ÇÖœÜ
--     have aux : ŒºH[t.toReal] G = 0 := by
--       have : ŒºH[t.toReal] G ‚â§ 0 := by
--         calc
--           ŒºH[t.toReal] G ‚â§ ŒºH[t.toReal] (G' k) := by sorry
--           _ ‚â§ ŒºH[d.toReal] (G' k) := by sorry
--           _ = 0 := by sorry
--       exact le_bot_iff.1 this
--     have : ŒºH[t.toReal] G ‚â§ ŒºH[d.toReal] (G' k) := by sorry
--     sorry
--     -- rw [dimH_eq_iInf]
--     -- sorry
--   exact ‚ü®G, iGŒ¥, Asub, le_antisymm hle hge‚ü©

theorem exists_GŒ¥_of_dimH {n : ‚Ñï} (A : Set (Fin n ‚Üí ‚Ñù)) :
    ‚àÉ G : Set (Fin n ‚Üí ‚Ñù), IsGŒ¥ G ‚àß A ‚äÜ G ‚àß dimH G = dimH A := by
  -- set s := dimH A with hs
  -- have hs_nonneg : 0 ‚â§ dimH A := by positivity
  observe dimHA_ne_top : dimH A ‚â† ‚ä§
  observe dimHA_nt_top : dimH A < ‚ä§
  obtain ‚ü®œÜ, h‚ÇÅœÜ, h‚ÇÇœÜ, h‚ÇÉœÜ‚ü© := exists_seq_strictAnti_tendsto' (show (0 : ‚Ñù‚â•0‚àû) < 1 by norm_num)
  have h‚ÇÑœÜ : Tendsto œÜ atTop (ùìù[>] 0) :=
    tendsto_nhdsWithin_mono_right
      (Set.range_subset_iff.2 (by simp_all)) (tendsto_nhdsWithin_range.2 h‚ÇÉœÜ)
  choose G' hG'_GŒ¥ subG' meas_eq' using
    fun k : ‚Ñï ‚Ü¶
      have : (0 : ‚Ñù) ‚â§ (dimH A + œÜ k).toReal := by positivity
      asdf this A
  let G := ‚ãÇ k, G' k
  have iGŒ¥ : IsGŒ¥ G := IsGŒ¥.iInter fun k ‚Ü¶ hG'_GŒ¥ k
  have Asub : A ‚äÜ G := subset_iInter fun k ‚Ü¶ subG' k
  have hge : dimH A ‚â§ dimH G := dimH_mono Asub
  have hle : dimH G ‚â§ dimH A := dimH_le fun d' hd' ‚Ü¶ by
    by_contra! hgt
    have hd_pos : 0 < (d' : ‚Ñù‚â•0‚àû) - dimH A := by aesop
    rw [ENNReal.tendsto_atTop_zero] at h‚ÇÉœÜ
    rcases h‚ÇÉœÜ _ hd_pos with ‚ü®k, hœÜk_lt‚ü©
    set D := (dimH A + œÜ k) with hD
    specialize h‚ÇÇœÜ k
    simp only [mem_Ioo] at h‚ÇÇœÜ
    cases' h‚ÇÇœÜ with hœÜk_gt_0 hœÜk_lt_1
    have hœÜk_ne_top : œÜ k ‚â† ‚ä§ := LT.lt.ne_top hœÜk_lt_1
    have hlt : (dimH A) < D.toNNReal := by
      -- add_lt_add_left hpos (dimH A)
      -- simpa [hD] using lt_add_iff_pos_right.2 h‚ÇÖœÜ
      rw [hD]
      sorry
    have hŒºA : ŒºH[D.toNNReal] A = 0 := hausdorffMeasure_of_dimH_lt hlt
      -- simpa [hD] using hausdorffMeasure_of_dimH_lt (by simpa using hlt)
      -- hausdorffMeasure_of_dimH_lt hlt
    have hŒºGk : ŒºH[D.toReal] (G' k) = 0 := (meas_eq' k).trans hŒºA
    have hmono : ŒºH[d'.toReal] G ‚â§ ŒºH[D.toReal] (G' k) := by
      calc
        ŒºH[d'.toReal] G ‚â§ ŒºH[d'.toReal] (G' k) := by
          apply measure_mono
          exact iInter_subset_of_subset k fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
        _ ‚â§ ŒºH[D.toReal] (G' k) := by
          apply hausdorffMeasure_mono
          apply le_of_lt
          rw [hD]
          specialize hœÜk_lt k
          simp only [ge_iff_le, le_refl, forall_const] at hœÜk_lt
          sorry
    have h0 : ŒºH[d'.toReal] G = 0 := by
      have hbot : ŒºH[d'.toReal] G ‚â§ 0 := by
        apply hmono.trans_eq
        exact hŒºGk
      exact le_bot_iff.1 hbot
    simp [h0] at hd'
  exact ‚ü®G, iGŒ¥, Asub, le_antisymm hle hge‚ü©

end

end Besicovitch
